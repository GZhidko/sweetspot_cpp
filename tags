!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/grigory/sweetspot_cpp/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	//
$(VERBOSE).SILENT	build/Makefile	/^$(VERBOSE).SILENT:$/;"	t
$(VERBOSE)MAKESILENT	build/Makefile	/^$(VERBOSE)MAKESILENT = -s$/;"	m
%	build/Makefile	/^% : %,v$/;"	t
%	build/Makefile	/^% : RCS\/%$/;"	t
%	build/Makefile	/^% : RCS\/%,v$/;"	t
%	build/Makefile	/^% : SCCS\/s.%$/;"	t
%	build/Makefile	/^% : s.%$/;"	t
0	build/compile_commands.json	/^{$/;"	o
1	build/compile_commands.json	/^{$/;"	o
10	build/compile_commands.json	/^{$/;"	o
11	build/compile_commands.json	/^{$/;"	o
12	build/compile_commands.json	/^{$/;"	o
2	build/compile_commands.json	/^{$/;"	o
3	build/compile_commands.json	/^{$/;"	o
4	build/compile_commands.json	/^{$/;"	o
5	build/compile_commands.json	/^{$/;"	o
6	build/compile_commands.json	/^{$/;"	o
7	build/compile_commands.json	/^{$/;"	o
8	build/compile_commands.json	/^{$/;"	o
9	build/compile_commands.json	/^{$/;"	o
ARCHITECTURE_ID	build/CMakeFiles/3.28.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define ARCHITECTURE_ID /;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.28.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define ARCHITECTURE_ID /;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/3.28.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define ARCHITECTURE_ID$/;"	d	file:
CMAKE_AR	build/CMakeFiles/3.28.3/CMakeCXXCompiler.cmake	/^set(CMAKE_AR "\/usr\/bin\/ar")$/;"	v
CMAKE_BINARY_DIR	build/Makefile	/^CMAKE_BINARY_DIR = \/home\/grigory\/sweetspot_cpp\/build$/;"	m
CMAKE_CL_SHOWINCLUDES_PREFIX	build/CMakeFiles/3.28.3/CMakeCXXCompiler.cmake	/^  set(CMAKE_CL_SHOWINCLUDES_PREFIX "${CMAKE_CXX_CL_SHOWINCLUDES_PREFIX}")$/;"	v
CMAKE_COMMAND	build/Makefile	/^CMAKE_COMMAND = \/usr\/bin\/cmake$/;"	m
CMAKE_COMPILER_IS_GNUCXX	build/CMakeFiles/3.28.3/CMakeCXXCompiler.cmake	/^set(CMAKE_COMPILER_IS_GNUCXX 1)$/;"	v
CMAKE_CROSSCOMPILING	build/CMakeFiles/3.28.3/CMakeSystem.cmake	/^set(CMAKE_CROSSCOMPILING "FALSE")$/;"	v
CMAKE_CROSSCOMPILING	build/cmake_install.cmake	/^  set(CMAKE_CROSSCOMPILING "FALSE")$/;"	v
CMAKE_CXX11_COMPILE_FEATURES	build/CMakeFiles/3.28.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX11_COMPILE_FEATURES "cxx_std_11;cxx_alias_templates;cxx_alignas;cxx_alignof;cxx_att/;"	v
CMAKE_CXX14_COMPILE_FEATURES	build/CMakeFiles/3.28.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX14_COMPILE_FEATURES "cxx_std_14;cxx_aggregate_default_initializers;cxx_attribute_de/;"	v
CMAKE_CXX17_COMPILE_FEATURES	build/CMakeFiles/3.28.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX17_COMPILE_FEATURES "cxx_std_17")$/;"	v
CMAKE_CXX20_COMPILE_FEATURES	build/CMakeFiles/3.28.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX20_COMPILE_FEATURES "cxx_std_20")$/;"	v
CMAKE_CXX23_COMPILE_FEATURES	build/CMakeFiles/3.28.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX23_COMPILE_FEATURES "cxx_std_23")$/;"	v
CMAKE_CXX98_COMPILE_FEATURES	build/CMakeFiles/3.28.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX98_COMPILE_FEATURES "cxx_std_98;cxx_template_template_parameters")$/;"	v
CMAKE_CXX_ABI_COMPILED	build/CMakeFiles/3.28.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_ABI_COMPILED TRUE)$/;"	v
CMAKE_CXX_BYTE_ORDER	build/CMakeFiles/3.28.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_BYTE_ORDER "LITTLE_ENDIAN")$/;"	v
CMAKE_CXX_CL_SHOWINCLUDES_PREFIX	build/CMakeFiles/3.28.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_CL_SHOWINCLUDES_PREFIX "")$/;"	v
CMAKE_CXX_COMPILER	build/CMakeFiles/3.28.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER "\/usr\/bin\/c++")$/;"	v
CMAKE_CXX_COMPILER_ABI	build/CMakeFiles/3.28.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_ABI "ELF")$/;"	v
CMAKE_CXX_COMPILER_AR	build/CMakeFiles/3.28.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_AR "\/usr\/bin\/gcc-ar-13")$/;"	v
CMAKE_CXX_COMPILER_ARG1	build/CMakeFiles/3.28.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_ARG1 "")$/;"	v
CMAKE_CXX_COMPILER_ENV_VAR	build/CMakeFiles/3.28.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_ENV_VAR "CXX")$/;"	v
CMAKE_CXX_COMPILER_FRONTEND_VARIANT	build/CMakeFiles/3.28.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_FRONTEND_VARIANT "GNU")$/;"	v
CMAKE_CXX_COMPILER_ID	build/CMakeFiles/3.28.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_ID "GNU")$/;"	v
CMAKE_CXX_COMPILER_ID_RUN	build/CMakeFiles/3.28.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_ID_RUN 1)$/;"	v
CMAKE_CXX_COMPILER_LOADED	build/CMakeFiles/3.28.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_LOADED 1)$/;"	v
CMAKE_CXX_COMPILER_RANLIB	build/CMakeFiles/3.28.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_RANLIB "\/usr\/bin\/gcc-ranlib-13")$/;"	v
CMAKE_CXX_COMPILER_VERSION	build/CMakeFiles/3.28.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_VERSION "13.3.0")$/;"	v
CMAKE_CXX_COMPILER_VERSION_INTERNAL	build/CMakeFiles/3.28.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_VERSION_INTERNAL "")$/;"	v
CMAKE_CXX_COMPILER_WORKS	build/CMakeFiles/3.28.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_WORKS TRUE)$/;"	v
CMAKE_CXX_COMPILER_WRAPPER	build/CMakeFiles/3.28.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILER_WRAPPER "")$/;"	v
CMAKE_CXX_COMPILE_FEATURES	build/CMakeFiles/3.28.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_COMPILE_FEATURES "cxx_std_98;cxx_template_template_parameters;cxx_std_11;cxx_alias/;"	v
CMAKE_CXX_EXTENSIONS_COMPUTED_DEFAULT	build/CMakeFiles/3.28.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_EXTENSIONS_COMPUTED_DEFAULT "ON")$/;"	v
CMAKE_CXX_IGNORE_EXTENSIONS	build/CMakeFiles/3.28.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_IGNORE_EXTENSIONS inl;h;hpp;HPP;H;o;O;obj;OBJ;def;DEF;rc;RC)$/;"	v
CMAKE_CXX_IMPLICIT_INCLUDE_DIRECTORIES	build/CMakeFiles/3.28.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_IMPLICIT_INCLUDE_DIRECTORIES "\/usr\/include\/c++\/13;\/usr\/include\/x86_64-linux/;"	v
CMAKE_CXX_IMPLICIT_LINK_DIRECTORIES	build/CMakeFiles/3.28.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_IMPLICIT_LINK_DIRECTORIES "\/usr\/lib\/gcc\/x86_64-linux-gnu\/13;\/usr\/lib\/x86_6/;"	v
CMAKE_CXX_IMPLICIT_LINK_FRAMEWORK_DIRECTORIES	build/CMakeFiles/3.28.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_IMPLICIT_LINK_FRAMEWORK_DIRECTORIES "")$/;"	v
CMAKE_CXX_IMPLICIT_LINK_LIBRARIES	build/CMakeFiles/3.28.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_IMPLICIT_LINK_LIBRARIES "stdc++;m;gcc_s;gcc;c;gcc_s;gcc")$/;"	v
CMAKE_CXX_INCLUDE_REGEX_COMPLAIN	build/CMakeFiles/CMakeDirectoryInformation.cmake	/^set(CMAKE_CXX_INCLUDE_REGEX_COMPLAIN ${CMAKE_C_INCLUDE_REGEX_COMPLAIN})$/;"	v
CMAKE_CXX_INCLUDE_REGEX_SCAN	build/CMakeFiles/CMakeDirectoryInformation.cmake	/^set(CMAKE_CXX_INCLUDE_REGEX_SCAN ${CMAKE_C_INCLUDE_REGEX_SCAN})$/;"	v
CMAKE_CXX_LIBRARY_ARCHITECTURE	build/CMakeFiles/3.28.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_LIBRARY_ARCHITECTURE "x86_64-linux-gnu")$/;"	v
CMAKE_CXX_LINKER_DEPFILE_SUPPORTED	build/CMakeFiles/3.28.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_LINKER_DEPFILE_SUPPORTED TRUE)$/;"	v
CMAKE_CXX_LINKER_PREFERENCE	build/CMakeFiles/3.28.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_LINKER_PREFERENCE 30)$/;"	v
CMAKE_CXX_LINKER_PREFERENCE_PROPAGATES	build/CMakeFiles/3.28.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_LINKER_PREFERENCE_PROPAGATES 1)$/;"	v
CMAKE_CXX_PLATFORM_ID	build/CMakeFiles/3.28.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_PLATFORM_ID "Linux")$/;"	v
CMAKE_CXX_SIMULATE_ID	build/CMakeFiles/3.28.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_SIMULATE_ID "")$/;"	v
CMAKE_CXX_SIMULATE_VERSION	build/CMakeFiles/3.28.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_SIMULATE_VERSION "")$/;"	v
CMAKE_CXX_SIZEOF_DATA_PTR	build/CMakeFiles/3.28.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_SIZEOF_DATA_PTR "8")$/;"	v
CMAKE_CXX_SOURCE_FILE_EXTENSIONS	build/CMakeFiles/3.28.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_SOURCE_FILE_EXTENSIONS C;M;c++;cc;cpp;cxx;m;mm;mpp;CPP;ixx;cppm;ccm;cxxm;c++m)$/;"	v
CMAKE_CXX_STANDARD	CMakeLists.txt	/^set(CMAKE_CXX_STANDARD 17)$/;"	v
CMAKE_CXX_STANDARD_COMPUTED_DEFAULT	build/CMakeFiles/3.28.3/CMakeCXXCompiler.cmake	/^set(CMAKE_CXX_STANDARD_COMPUTED_DEFAULT "17")$/;"	v
CMAKE_CXX_STANDARD_REQUIRED	CMakeLists.txt	/^set(CMAKE_CXX_STANDARD_REQUIRED ON)$/;"	v
CMAKE_C_INCLUDE_REGEX_COMPLAIN	build/CMakeFiles/CMakeDirectoryInformation.cmake	/^set(CMAKE_C_INCLUDE_REGEX_COMPLAIN "^$")$/;"	v
CMAKE_C_INCLUDE_REGEX_SCAN	build/CMakeFiles/CMakeDirectoryInformation.cmake	/^set(CMAKE_C_INCLUDE_REGEX_SCAN "^.*$")$/;"	v
CMAKE_DEPENDS_DEPENDENCY_FILES	build/CMakeFiles/PacketProcessor.dir/DependInfo.cmake	/^set(CMAKE_DEPENDS_DEPENDENCY_FILES$/;"	v
CMAKE_DEPENDS_DEPENDENCY_FILES	build/CMakeFiles/af_packet_runner.dir/DependInfo.cmake	/^set(CMAKE_DEPENDS_DEPENDENCY_FILES$/;"	v
CMAKE_DEPENDS_DEPENDENCY_FILES	build/CMakeFiles/test_checksum.dir/DependInfo.cmake	/^set(CMAKE_DEPENDS_DEPENDENCY_FILES$/;"	v
CMAKE_DEPENDS_DEPENDENCY_FILES	build/CMakeFiles/test_fanout.dir/DependInfo.cmake	/^set(CMAKE_DEPENDS_DEPENDENCY_FILES$/;"	v
CMAKE_DEPENDS_DEPENDENCY_FILES	build/CMakeFiles/test_nat.dir/DependInfo.cmake	/^set(CMAKE_DEPENDS_DEPENDENCY_FILES$/;"	v
CMAKE_DEPENDS_DEPENDENCY_FILES	build/CMakeFiles/test_workers.dir/DependInfo.cmake	/^set(CMAKE_DEPENDS_DEPENDENCY_FILES$/;"	v
CMAKE_DEPENDS_GENERATOR	build/CMakeFiles/Makefile.cmake	/^set(CMAKE_DEPENDS_GENERATOR "Unix Makefiles")$/;"	v
CMAKE_DEPENDS_IN_PROJECT_ONLY	build/CMakeFiles/PacketProcessor.dir/DependInfo.cmake	/^set(CMAKE_DEPENDS_IN_PROJECT_ONLY OFF)$/;"	v
CMAKE_DEPENDS_IN_PROJECT_ONLY	build/CMakeFiles/af_packet_runner.dir/DependInfo.cmake	/^set(CMAKE_DEPENDS_IN_PROJECT_ONLY OFF)$/;"	v
CMAKE_DEPENDS_IN_PROJECT_ONLY	build/CMakeFiles/test_checksum.dir/DependInfo.cmake	/^set(CMAKE_DEPENDS_IN_PROJECT_ONLY OFF)$/;"	v
CMAKE_DEPENDS_IN_PROJECT_ONLY	build/CMakeFiles/test_fanout.dir/DependInfo.cmake	/^set(CMAKE_DEPENDS_IN_PROJECT_ONLY OFF)$/;"	v
CMAKE_DEPENDS_IN_PROJECT_ONLY	build/CMakeFiles/test_nat.dir/DependInfo.cmake	/^set(CMAKE_DEPENDS_IN_PROJECT_ONLY OFF)$/;"	v
CMAKE_DEPENDS_IN_PROJECT_ONLY	build/CMakeFiles/test_workers.dir/DependInfo.cmake	/^set(CMAKE_DEPENDS_IN_PROJECT_ONLY OFF)$/;"	v
CMAKE_DEPENDS_LANGUAGES	build/CMakeFiles/PacketProcessor.dir/DependInfo.cmake	/^set(CMAKE_DEPENDS_LANGUAGES$/;"	v
CMAKE_DEPENDS_LANGUAGES	build/CMakeFiles/af_packet_runner.dir/DependInfo.cmake	/^set(CMAKE_DEPENDS_LANGUAGES$/;"	v
CMAKE_DEPENDS_LANGUAGES	build/CMakeFiles/test_checksum.dir/DependInfo.cmake	/^set(CMAKE_DEPENDS_LANGUAGES$/;"	v
CMAKE_DEPENDS_LANGUAGES	build/CMakeFiles/test_fanout.dir/DependInfo.cmake	/^set(CMAKE_DEPENDS_LANGUAGES$/;"	v
CMAKE_DEPENDS_LANGUAGES	build/CMakeFiles/test_nat.dir/DependInfo.cmake	/^set(CMAKE_DEPENDS_LANGUAGES$/;"	v
CMAKE_DEPENDS_LANGUAGES	build/CMakeFiles/test_workers.dir/DependInfo.cmake	/^set(CMAKE_DEPENDS_LANGUAGES$/;"	v
CMAKE_DEPEND_INFO_FILES	build/CMakeFiles/Makefile.cmake	/^set(CMAKE_DEPEND_INFO_FILES$/;"	v
CMAKE_FORCE_UNIX_PATHS	build/CMakeFiles/CMakeDirectoryInformation.cmake	/^set(CMAKE_FORCE_UNIX_PATHS 1)$/;"	v
CMAKE_Fortran_TARGET_FORWARD_LINKED_INFO_FILES	build/CMakeFiles/PacketProcessor.dir/DependInfo.cmake	/^set(CMAKE_Fortran_TARGET_FORWARD_LINKED_INFO_FILES$/;"	v
CMAKE_Fortran_TARGET_FORWARD_LINKED_INFO_FILES	build/CMakeFiles/af_packet_runner.dir/DependInfo.cmake	/^set(CMAKE_Fortran_TARGET_FORWARD_LINKED_INFO_FILES$/;"	v
CMAKE_Fortran_TARGET_FORWARD_LINKED_INFO_FILES	build/CMakeFiles/test_checksum.dir/DependInfo.cmake	/^set(CMAKE_Fortran_TARGET_FORWARD_LINKED_INFO_FILES$/;"	v
CMAKE_Fortran_TARGET_FORWARD_LINKED_INFO_FILES	build/CMakeFiles/test_fanout.dir/DependInfo.cmake	/^set(CMAKE_Fortran_TARGET_FORWARD_LINKED_INFO_FILES$/;"	v
CMAKE_Fortran_TARGET_FORWARD_LINKED_INFO_FILES	build/CMakeFiles/test_nat.dir/DependInfo.cmake	/^set(CMAKE_Fortran_TARGET_FORWARD_LINKED_INFO_FILES$/;"	v
CMAKE_Fortran_TARGET_FORWARD_LINKED_INFO_FILES	build/CMakeFiles/test_workers.dir/DependInfo.cmake	/^set(CMAKE_Fortran_TARGET_FORWARD_LINKED_INFO_FILES$/;"	v
CMAKE_Fortran_TARGET_LINKED_INFO_FILES	build/CMakeFiles/PacketProcessor.dir/DependInfo.cmake	/^set(CMAKE_Fortran_TARGET_LINKED_INFO_FILES$/;"	v
CMAKE_Fortran_TARGET_LINKED_INFO_FILES	build/CMakeFiles/af_packet_runner.dir/DependInfo.cmake	/^set(CMAKE_Fortran_TARGET_LINKED_INFO_FILES$/;"	v
CMAKE_Fortran_TARGET_LINKED_INFO_FILES	build/CMakeFiles/test_checksum.dir/DependInfo.cmake	/^set(CMAKE_Fortran_TARGET_LINKED_INFO_FILES$/;"	v
CMAKE_Fortran_TARGET_LINKED_INFO_FILES	build/CMakeFiles/test_fanout.dir/DependInfo.cmake	/^set(CMAKE_Fortran_TARGET_LINKED_INFO_FILES$/;"	v
CMAKE_Fortran_TARGET_LINKED_INFO_FILES	build/CMakeFiles/test_nat.dir/DependInfo.cmake	/^set(CMAKE_Fortran_TARGET_LINKED_INFO_FILES$/;"	v
CMAKE_Fortran_TARGET_LINKED_INFO_FILES	build/CMakeFiles/test_workers.dir/DependInfo.cmake	/^set(CMAKE_Fortran_TARGET_LINKED_INFO_FILES$/;"	v
CMAKE_Fortran_TARGET_MODULE_DIR	build/CMakeFiles/PacketProcessor.dir/DependInfo.cmake	/^set(CMAKE_Fortran_TARGET_MODULE_DIR "")$/;"	v
CMAKE_Fortran_TARGET_MODULE_DIR	build/CMakeFiles/af_packet_runner.dir/DependInfo.cmake	/^set(CMAKE_Fortran_TARGET_MODULE_DIR "")$/;"	v
CMAKE_Fortran_TARGET_MODULE_DIR	build/CMakeFiles/test_checksum.dir/DependInfo.cmake	/^set(CMAKE_Fortran_TARGET_MODULE_DIR "")$/;"	v
CMAKE_Fortran_TARGET_MODULE_DIR	build/CMakeFiles/test_fanout.dir/DependInfo.cmake	/^set(CMAKE_Fortran_TARGET_MODULE_DIR "")$/;"	v
CMAKE_Fortran_TARGET_MODULE_DIR	build/CMakeFiles/test_nat.dir/DependInfo.cmake	/^set(CMAKE_Fortran_TARGET_MODULE_DIR "")$/;"	v
CMAKE_Fortran_TARGET_MODULE_DIR	build/CMakeFiles/test_workers.dir/DependInfo.cmake	/^set(CMAKE_Fortran_TARGET_MODULE_DIR "")$/;"	v
CMAKE_HOST_SYSTEM	build/CMakeFiles/3.28.3/CMakeSystem.cmake	/^set(CMAKE_HOST_SYSTEM "Linux-6.8.0-71-generic")$/;"	v
CMAKE_HOST_SYSTEM_NAME	build/CMakeFiles/3.28.3/CMakeSystem.cmake	/^set(CMAKE_HOST_SYSTEM_NAME "Linux")$/;"	v
CMAKE_HOST_SYSTEM_PROCESSOR	build/CMakeFiles/3.28.3/CMakeSystem.cmake	/^set(CMAKE_HOST_SYSTEM_PROCESSOR "x86_64")$/;"	v
CMAKE_HOST_SYSTEM_VERSION	build/CMakeFiles/3.28.3/CMakeSystem.cmake	/^set(CMAKE_HOST_SYSTEM_VERSION "6.8.0-71-generic")$/;"	v
CMAKE_INSTALL_COMPONENT	build/cmake_install.cmake	/^    set(CMAKE_INSTALL_COMPONENT "${COMPONENT}")$/;"	v
CMAKE_INSTALL_COMPONENT	build/cmake_install.cmake	/^    set(CMAKE_INSTALL_COMPONENT)$/;"	v
CMAKE_INSTALL_CONFIG_NAME	build/cmake_install.cmake	/^    set(CMAKE_INSTALL_CONFIG_NAME "")$/;"	v
CMAKE_INSTALL_MANIFEST	build/cmake_install.cmake	/^  set(CMAKE_INSTALL_MANIFEST "install_manifest.txt")$/;"	v
CMAKE_INSTALL_MANIFEST	build/cmake_install.cmake	/^  set(CMAKE_INSTALL_MANIFEST "install_manifest_${CMAKE_INSTALL_COMPONENT}.txt")$/;"	v
CMAKE_INSTALL_PREFIX	build/cmake_install.cmake	/^  set(CMAKE_INSTALL_PREFIX "\/usr\/local")$/;"	v
CMAKE_INSTALL_SO_NO_EXE	build/cmake_install.cmake	/^  set(CMAKE_INSTALL_SO_NO_EXE "1")$/;"	v
CMAKE_INTERNAL_PLATFORM_ABI	build/CMakeFiles/3.28.3/CMakeCXXCompiler.cmake	/^  set(CMAKE_INTERNAL_PLATFORM_ABI "${CMAKE_CXX_COMPILER_ABI}")$/;"	v
CMAKE_LIBRARY_ARCHITECTURE	build/CMakeFiles/3.28.3/CMakeCXXCompiler.cmake	/^  set(CMAKE_LIBRARY_ARCHITECTURE "x86_64-linux-gnu")$/;"	v
CMAKE_LINKER	build/CMakeFiles/3.28.3/CMakeCXXCompiler.cmake	/^set(CMAKE_LINKER "\/usr\/bin\/ld")$/;"	v
CMAKE_MAKEFILE_DEPENDS	build/CMakeFiles/Makefile.cmake	/^set(CMAKE_MAKEFILE_DEPENDS$/;"	v
CMAKE_MAKEFILE_OUTPUTS	build/CMakeFiles/Makefile.cmake	/^set(CMAKE_MAKEFILE_OUTPUTS$/;"	v
CMAKE_MAKEFILE_PRODUCTS	build/CMakeFiles/Makefile.cmake	/^set(CMAKE_MAKEFILE_PRODUCTS$/;"	v
CMAKE_MT	build/CMakeFiles/3.28.3/CMakeCXXCompiler.cmake	/^set(CMAKE_MT "")$/;"	v
CMAKE_OBJDUMP	build/cmake_install.cmake	/^  set(CMAKE_OBJDUMP "\/usr\/bin\/objdump")$/;"	v
CMAKE_RANLIB	build/CMakeFiles/3.28.3/CMakeCXXCompiler.cmake	/^set(CMAKE_RANLIB "\/usr\/bin\/ranlib")$/;"	v
CMAKE_RELATIVE_PATH_TOP_BINARY	build/CMakeFiles/CMakeDirectoryInformation.cmake	/^set(CMAKE_RELATIVE_PATH_TOP_BINARY "\/home\/grigory\/sweetspot_cpp\/build")$/;"	v
CMAKE_RELATIVE_PATH_TOP_SOURCE	build/CMakeFiles/CMakeDirectoryInformation.cmake	/^set(CMAKE_RELATIVE_PATH_TOP_SOURCE "\/home\/grigory\/sweetspot_cpp")$/;"	v
CMAKE_SIZEOF_VOID_P	build/CMakeFiles/3.28.3/CMakeCXXCompiler.cmake	/^  set(CMAKE_SIZEOF_VOID_P "${CMAKE_CXX_SIZEOF_DATA_PTR}")$/;"	v
CMAKE_SOURCE_DIR	build/Makefile	/^CMAKE_SOURCE_DIR = \/home\/grigory\/sweetspot_cpp$/;"	m
CMAKE_SYSTEM	build/CMakeFiles/3.28.3/CMakeSystem.cmake	/^set(CMAKE_SYSTEM "Linux-6.8.0-71-generic")$/;"	v
CMAKE_SYSTEM_LOADED	build/CMakeFiles/3.28.3/CMakeSystem.cmake	/^set(CMAKE_SYSTEM_LOADED 1)$/;"	v
CMAKE_SYSTEM_NAME	build/CMakeFiles/3.28.3/CMakeSystem.cmake	/^set(CMAKE_SYSTEM_NAME "Linux")$/;"	v
CMAKE_SYSTEM_PROCESSOR	build/CMakeFiles/3.28.3/CMakeSystem.cmake	/^set(CMAKE_SYSTEM_PROCESSOR "x86_64")$/;"	v
CMAKE_SYSTEM_VERSION	build/CMakeFiles/3.28.3/CMakeSystem.cmake	/^set(CMAKE_SYSTEM_VERSION "6.8.0-71-generic")$/;"	v
CMAKE_TAPI	build/CMakeFiles/3.28.3/CMakeCXXCompiler.cmake	/^set(CMAKE_TAPI "CMAKE_TAPI-NOTFOUND")$/;"	v
COMPILER_ID	build/CMakeFiles/3.28.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_ID /;"	d	file:
COMPILER_VERSION	build/CMakeFiles/3.28.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define COMPILER_VERSION /;"	d	file:
COMPILER_VERSION_INTERNAL	build/CMakeFiles/3.28.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define COMPILER_VERSION_INTERNAL /;"	d	file:
COMPILER_VERSION_INTERNAL	build/CMakeFiles/3.28.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_INTERNAL /;"	d	file:
COMPILER_VERSION_INTERNAL	build/CMakeFiles/3.28.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_INTERNAL /;"	d	file:
COMPILER_VERSION_INTERNAL_STR	build/CMakeFiles/3.28.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_INTERNAL_STR /;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.28.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^  # define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.28.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.28.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MAJOR	build/CMakeFiles/3.28.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_MAJOR /;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.28.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^  # define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.28.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.28.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_MINOR	build/CMakeFiles/3.28.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_MINOR /;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.28.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^  # define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.28.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.28.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_PATCH	build/CMakeFiles/3.28.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_PATCH /;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.28.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define COMPILER_VERSION_TWEAK /;"	d	file:
COMPILER_VERSION_TWEAK	build/CMakeFiles/3.28.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define COMPILER_VERSION_TWEAK /;"	d	file:
CPUFanoutHash	common/jenkins_hash.hpp	/^namespace CPUFanoutHash {$/;"	n
CXX_STD	build/CMakeFiles/3.28.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#      define CXX_STD /;"	d	file:
CXX_STD	build/CMakeFiles/3.28.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#    define CXX_STD /;"	d	file:
CXX_STD	build/CMakeFiles/3.28.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define CXX_STD /;"	d	file:
Chain	common/worker.hpp	/^    using Chain = HeaderChainTuple<IPv4Header, TCPHeader, UDPHeader, ICMPHeader>;$/;"	t	class:Worker	typeref:typename:HeaderChainTuple<IPv4Header,TCPHeader,UDPHeader,ICMPHeader>
Clock	nat/nat.h	/^    using Clock = std::chrono::steady_clock;$/;"	t	class:Nat	typeref:typename:std::chrono::steady_clock
Committer	committer/committer.h	/^template <> struct Committer<ICMPHeader> {$/;"	s
Committer	committer/committer.h	/^template <> struct Committer<IPv4Header> {$/;"	s
Committer	committer/committer.h	/^template <> struct Committer<TCPHeader> {$/;"	s
Committer	committer/committer.h	/^template <> struct Committer<UDPHeader> {$/;"	s
Committer	committer/committer.h	/^template <typename Header> struct Committer {$/;"	s
DEBUG_ALL	common/logger.h	/^    DEBUG_ALL    = 0xFFFFFFFF$/;"	e	enum:DebugFlags
DEBUG_ERROR	common/logger.h	/^    DEBUG_ERROR  = 1 << 3,$/;"	e	enum:DebugFlags
DEBUG_IO	common/logger.h	/^    DEBUG_IO     = 1 << 4,$/;"	e	enum:DebugFlags
DEBUG_NAT	common/logger.h	/^    DEBUG_NAT    = 1 << 2,$/;"	e	enum:DebugFlags
DEBUG_NETSET	common/logger.h	/^    DEBUG_NETSET = 1 << 0,$/;"	e	enum:DebugFlags
DEBUG_PARSER	common/logger.h	/^    DEBUG_PARSER = 1 << 1,$/;"	e	enum:DebugFlags
DEC	build/CMakeFiles/3.28.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define DEC(/;"	d	file:
DebugFlags	common/logger.h	/^enum DebugFlags : uint32_t {$/;"	g	typeref:typename:uint32_t
Direction	af_packet_io/packet_socket.hpp	/^enum class Direction {$/;"	g	namespace:af_packet_io
EOF	scripts/setup_veth_env.sh	/^    cat <<EOF$/;"	h
EQUALS	build/Makefile	/^EQUALS = =$/;"	m
EndpointBase	nat/endpoint_base.hpp	/^    EndpointBase(std::shared_ptr<NatConfig> config, uint32_t cpu_count = 1)$/;"	f	class:EndpointBase
EndpointBase	nat/endpoint_base.hpp	/^class EndpointBase {$/;"	c
EthernetHeader	include/ethernet.h	/^struct EthernetHeader { uint8_t dst[6]; uint8_t src[6]; uint16_t ethertype; };$/;"	s
Ev	tests/log_skb_hash_with_key.py	/^class Ev(ctypes.Structure):$/;"	c
Ev	tests/log_udp_hash.py	/^class Ev(ctypes.Structure):$/;"	c
FLOW_DISSECTOR_KEY_IPV4_ADDRS	tests/flow_dissector.h	/^#define FLOW_DISSECTOR_KEY_IPV4_ADDRS /;"	d
FLOW_DISSECTOR_KEY_IPV6_ADDRS	tests/flow_dissector.h	/^#define FLOW_DISSECTOR_KEY_IPV6_ADDRS /;"	d
FLOW_DISSECTOR_KEY_TIPC	tests/flow_dissector.h	/^#define FLOW_DISSECTOR_KEY_TIPC /;"	d
FLOW_KEYS_HASH_OFFSET	tests/flow_dissector.h	/^#define FLOW_KEYS_HASH_OFFSET /;"	d
FanoutConfig	af_packet_io/packet_socket.hpp	/^struct FanoutConfig {$/;"	s	namespace:af_packet_io
FanoutParams	af_packet_io/io_context.hpp	/^struct FanoutParams {$/;"	s	namespace:af_packet_io
Filter	filters/filter.h	/^struct Filter { bool operator()(const Header&) { return true; } };$/;"	s
Filter	filters/filter_icmp.cpp	/^struct Filter<ICMPHeader> {$/;"	s	file:
Filter	filters/filter_ipv4.cpp	/^struct Filter<IPv4Header> {$/;"	s	file:
Filter	filters/filter_tcp.cpp	/^struct Filter<TCPHeader> {$/;"	s	file:
Filter	filters/filter_udp.cpp	/^struct Filter<UDPHeader> {$/;"	s	file:
Flow	include/icmp.h	/^    struct Flow {$/;"	s	struct:ICMPHeader
Flow	include/ipv4.h	/^    struct Flow {$/;"	s	struct:IPv4Header
Flow	include/tcp.h	/^    struct Flow {$/;"	s	struct:TCPHeader
Flow	include/udp.h	/^    struct Flow {$/;"	s	struct:UDPHeader
FlowKey	nat/nat.h	/^    struct FlowKey {$/;"	s	class:Nat
FlowKeyHash	nat/nat.h	/^    struct FlowKeyHash {$/;"	s	class:Nat
FramePayload	common/worker.hpp	/^    struct FramePayload {$/;"	s	class:Worker
HEX	build/CMakeFiles/3.28.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define HEX(/;"	d	file:
Header	common/worker.cpp	/^        using Header = std::decay_t<decltype(hdr)>;$/;"	t	function:Worker::handle_frame::__anonf3a181e80302	file:
HeaderChainTuple	chain/header_chain.h	/^template <typename... Headers> class HeaderChainTuple {$/;"	c
ICMPHeader	include/icmp.h	/^struct ICMPHeader {$/;"	s
IPv4Header	include/ipv4.h	/^struct IPv4Header {$/;"	s
InterfaceContext	common/worker.hpp	/^    struct InterfaceContext {$/;"	s	class:Worker
IoConfig	af_packet_io/io_context.hpp	/^struct IoConfig {$/;"	s	namespace:af_packet_io
IoContext	af_packet_io/io_context.cpp	/^IoContext::IoContext(const IoConfig& cfg) : cfg_(cfg) {$/;"	f	class:af_packet_io::IoContext
IoContext	af_packet_io/io_context.hpp	/^class IoContext {$/;"	c	namespace:af_packet_io
LOG	common/logger.h	/^#define LOG(/;"	d
Logger	common/logger.h	/^    Logger() : running_(true), worker_(&Logger::processQueue, this) {}$/;"	f	class:Logger
Logger	common/logger.h	/^class Logger {$/;"	c
MappingEntry	nat/nat.h	/^    struct MappingEntry {$/;"	s	class:Nat
MappingTable	nat/nat.h	/^    struct MappingTable {$/;"	s	class:Nat
MyChain	main.cpp	/^using MyChain = HeaderChainTuple< IPv4Header, TCPHeader, UDPHeader, ICMPHeader >;$/;"	t	typeref:typename:HeaderChainTuple<IPv4Header,TCPHeader,UDPHeader,ICMPHeader>	file:
Nat	nat/nat.cpp	/^Nat::Nat(const NatConfig& cfg, uint32_t thread_index, uint32_t thread_count)$/;"	f	class:Nat
Nat	nat/nat.h	/^class Nat : public EndpointBase {$/;"	c
NatConfig	nat/nat_config.hpp	/^struct NatConfig {$/;"	s
Netset	common/netset.hpp	/^class Netset {$/;"	c
Origin	common/worker.hpp	/^        enum class Origin { Private, Public } origin = Origin::Private;$/;"	g	struct:Worker::FramePayload
PLATFORM_ID	build/CMakeFiles/3.28.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define PLATFORM_ID /;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.28.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define PLATFORM_ID$/;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.28.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define PLATFORM_ID /;"	d	file:
PLATFORM_ID	build/CMakeFiles/3.28.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define PLATFORM_ID$/;"	d	file:
PY	scripts/setup_veth_env.sh	/^    python3 - "$1" <<'PY'$/;"	h
PacketProcessor	CMakeLists.txt	/^add_executable(PacketProcessor ${SRC})$/;"	t
PacketProcessor	build/Makefile	/^PacketProcessor: cmake_check_build_system$/;"	t
PacketProcessor/fast	build/Makefile	/^PacketProcessor\/fast:$/;"	t
PacketSocket	af_packet_io/packet_socket.cpp	/^PacketSocket::PacketSocket(PacketSocket&& other) noexcept { *this = std::move(other); }$/;"	f	class:af_packet_io::PacketSocket
PacketSocket	af_packet_io/packet_socket.hpp	/^class PacketSocket {$/;"	c	namespace:af_packet_io
Parser	parsers/parser.h	/^struct Parser {$/;"	s
Parser	parsers/parser.h	/^struct Parser<ICMPHeader> {$/;"	s
Parser	parsers/parser.h	/^struct Parser<IPv4Header> {$/;"	s
Parser	parsers/parser.h	/^struct Parser<TCPHeader> {$/;"	s
Parser	parsers/parser.h	/^struct Parser<UDPHeader> {$/;"	s
Private	common/worker.hpp	/^        enum class Origin { Private, Public } origin = Origin::Private;$/;"	e	enum:Worker::FramePayload::Origin
PrivateKey	nat/nat.h	/^    struct PrivateKey {$/;"	s	class:Nat
PrivateKeyHash	nat/nat.h	/^    struct PrivateKeyHash {$/;"	s	class:Nat
PubKey	nat/nat.h	/^    struct PubKey {$/;"	s	class:Nat
PubKey	tests/test_fanout.cpp	/^struct PubKey {$/;"	s	file:
PubKeyHash	nat/nat.h	/^    struct PubKeyHash {$/;"	s	class:Nat
PubKeyHash	tests/test_fanout.cpp	/^struct PubKeyHash {$/;"	s	file:
PubOnlyKey	nat/nat.h	/^    struct PubOnlyKey {$/;"	s	class:Nat
PubOnlyKeyHash	nat/nat.h	/^    struct PubOnlyKeyHash {$/;"	s	class:Nat
Public	common/worker.hpp	/^        enum class Origin { Private, Public } origin = Origin::Private;$/;"	e	enum:Worker::FramePayload::Origin
RM	build/Makefile	/^RM = \/usr\/bin\/cmake -E rm -f$/;"	m
ROTL64	common/jenkins_hash.hpp	/^static inline uint64_t ROTL64(uint64_t x, unsigned r) {$/;"	f	namespace:CPUFanoutHash	typeref:typename:uint64_t
ROTL64	tests/siphash.c	/^#define ROTL64(/;"	d	file:
Range	common/netset.hpp	/^        Range(uint32_t min, uint32_t max) : ip_min(min), ip_max(max), next(nullptr) {}$/;"	f	struct:Netset::Range
Range	common/netset.hpp	/^    struct Range {$/;"	s	class:Netset
Record	tests/test_udp_hash.cpp	/^struct Record {$/;"	s	file:
RingConfig	af_packet_io/packet_socket.hpp	/^struct RingConfig {$/;"	s	namespace:af_packet_io
RingView	af_packet_io/ring_buffer.cpp	/^RingView::RingView(void* area, size_t length, size_t block_size, size_t block_count,$/;"	f	class:af_packet_io::RingView
RingView	af_packet_io/ring_buffer.hpp	/^class RingView {$/;"	c	namespace:af_packet_io
Rx	af_packet_io/packet_socket.hpp	/^    Rx,$/;"	e	enum:af_packet_io::Direction
SHELL	build/Makefile	/^SHELL = \/bin\/sh$/;"	m
SIMULATE_ID	build/CMakeFiles/3.28.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define SIMULATE_ID /;"	d	file:
SIMULATE_ID	build/CMakeFiles/3.28.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define SIMULATE_ID /;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.28.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define SIMULATE_VERSION_MAJOR /;"	d	file:
SIMULATE_VERSION_MAJOR	build/CMakeFiles/3.28.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define SIMULATE_VERSION_MAJOR /;"	d	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.28.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define SIMULATE_VERSION_MINOR /;"	d	file:
SIMULATE_VERSION_MINOR	build/CMakeFiles/3.28.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define SIMULATE_VERSION_MINOR /;"	d	file:
SIMULATE_VERSION_PATCH	build/CMakeFiles/3.28.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#   define SIMULATE_VERSION_PATCH /;"	d	file:
SIMULATE_VERSION_PATCH	build/CMakeFiles/3.28.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define SIMULATE_VERSION_PATCH /;"	d	file:
SIMULATE_VERSION_PATCH	build/CMakeFiles/3.28.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^# define SIMULATE_VERSION_PATCH /;"	d	file:
SIPROUND	common/jenkins_hash.hpp	/^#define SIPROUND(/;"	d
SIPROUND	tests/siphash.c	/^#define SIPROUND /;"	d	file:
STRINGIFY	build/CMakeFiles/3.28.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define STRINGIFY(/;"	d	file:
STRINGIFY_HELPER	build/CMakeFiles/3.28.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#define STRINGIFY_HELPER(/;"	d	file:
SipKey	common/jenkins_hash.hpp	/^struct SipKey {$/;"	s	namespace:CPUFanoutHash
TCPHeader	include/tcp.h	/^struct TCPHeader {$/;"	s
TPACKET_ALIGN	common/worker.cpp	/^#define TPACKET_ALIGN(/;"	d	file:
TP_STATUS_AVAILABLE	common/worker.cpp	/^#define TP_STATUS_AVAILABLE /;"	d	file:
TP_STATUS_OUTGOING	common/worker.cpp	/^#define TP_STATUS_OUTGOING /;"	d	file:
TestEndpoint	tests/test_fanout.cpp	/^    TestEndpoint(const NatConfig& cfg, uint32_t cpu_count)$/;"	f	class:TestEndpoint	file:
TestEndpoint	tests/test_fanout.cpp	/^class TestEndpoint : public EndpointBase {$/;"	c	file:
Translation	nat/nat.h	/^    struct Translation {$/;"	s	class:Nat
Tx	af_packet_io/packet_socket.hpp	/^    Tx$/;"	e	enum:af_packet_io::Direction
TxFrame	common/worker.hpp	/^    struct TxFrame {$/;"	s	class:Worker
UDPHeader	include/udp.h	/^struct UDPHeader {$/;"	s
USAGE	scripts/setup_veth_env.sh	/^    cat <<USAGE$/;"	h
Worker	common/worker.cpp	/^Worker::Worker(const WorkerPipelineConfig& cfg)$/;"	f	class:Worker
Worker	common/worker.hpp	/^class Worker {$/;"	c
WorkerPipelineConfig	common/worker.hpp	/^struct WorkerPipelineConfig {$/;"	s
__anon014c6b900111	apps/af_packet_runner.cpp	/^namespace {$/;"	n	file:
__anon014c6b900202	apps/af_packet_runner.cpp	/^                           const af_packet_io::FanoutParams& fanout) {$/;"	f	function:main	file:
__anon014c6b900302	apps/af_packet_runner.cpp	/^    auto forward = [&workers](uint32_t target, Worker::FramePayload&& frame) {$/;"	f	function:main	file:
__anon058a5124010a	tests/flow_dissector.h	/^    union {$/;"	u	struct:flow_dissector_key_addrs
__anon058a51240208	tests/flow_dissector.h	/^        struct {$/;"	s	union:flow_dissector_key_addrs::__anon058a5124010a
__anon058a51240308	tests/flow_dissector.h	/^        struct {$/;"	s	union:flow_dissector_key_addrs::__anon058a5124010a
__anon058a51240408	tests/flow_dissector.h	/^        struct {$/;"	s	union:flow_dissector_key_addrs::__anon058a5124010a
__anon05dda4d80102	chain/header_chain.h	/^        std::apply([&](auto&... hdrs) { ((hdrs ? func(*hdrs) : void()), ...); }, headers);$/;"	f	function:HeaderChainTuple::for_each	file:
__anon0853ca730102	common/logger.h	/^            cv_.wait(lock, [&]{ return !queue_.empty() || !running_; });$/;"	f	function:Logger::processQueue	file:
__anon3b5b11db0102	main.cpp	/^    chain.for_each([&](auto& hdr) {$/;"	f	function:apply_filters	file:
__anon43ea9b910111	nat/nat_tcp.cpp	/^namespace {$/;"	n	file:
__anon45c0227a0111	af_packet_io/packet_socket.cpp	/^namespace {$/;"	n	namespace:af_packet_io	file:
__anon547d934d0108	tests/siphash.h	/^typedef struct {$/;"	s
__anon69381a4a0102	tests/test_checksum.cpp	/^    auto check_ip = [&](uint32_t old_src, uint32_t new_src) {$/;"	f	function:main	file:
__anon69381a4a0202	tests/test_checksum.cpp	/^auto check_icmp = [&]() {$/;"	f	function:main	file:
__anon69381a4a0302	tests/test_checksum.cpp	/^    auto check_tcp = [&]() {\/\/$/;"	f	function:main	file:
__anon69381a4a0402	tests/test_checksum.cpp	/^    auto check_udp = [&]() {$/;"	f	function:main	file:
__anon7613369d0111	af_packet_io/checksum_utils.cpp	/^namespace {$/;"	n	namespace:af_packet_io	file:
__anon82bf5cc40111	tests/test_workers.cpp	/^namespace {$/;"	n	file:
__anon82bf5cc40202	tests/test_workers.cpp	/^    auto forward_cb = [&](uint32_t target, Worker::FramePayload&& frame) {$/;"	f	function:main	file:
__anon916d3dad0111	nat/nat_ipv4.cpp	/^namespace {$/;"	n	file:
__anon933a00f30111	nat/nat_udp.cpp	/^namespace {$/;"	n	file:
__anon97f778730111	nat/nat_icmp.cpp	/^namespace {$/;"	n	file:
__anond41471e80102	nat/endpoint_base.hpp	/^        auto builder = [&](uint16_t pub_port) {$/;"	f	function:EndpointBase::map_tcp_udp	file:
__anond41471e80202	nat/endpoint_base.hpp	/^        auto builder = [&](uint16_t new_id) {$/;"	f	function:EndpointBase::map_icmp	file:
__anone7d278eb0111	nat/nat.cpp	/^namespace {$/;"	n	file:
__anone8b2175a0111	tests/test_nat.cpp	/^namespace {$/;"	n	file:
__anonf3a181e80102	common/worker.cpp	/^    chain_.for_each([&](auto& hdr) {$/;"	f	function:Worker::handle_frame	file:
__anonf3a181e80202	common/worker.cpp	/^    chain_.for_each([&](auto& hdr) { nat_.process(hdr); });$/;"	f	function:Worker::handle_frame	file:
__anonf3a181e80302	common/worker.cpp	/^    chain_.for_each([&](auto& hdr) {$/;"	f	function:Worker::handle_frame	file:
__anonf3a181e80402	common/worker.cpp	/^    auto send_frame = [&](const TxFrame& frame, const char* reason) {$/;"	f	function:Worker::transmit_pending	file:
__anonf3a181e80502	common/worker.cpp	/^    auto collect = [&](InterfaceContext& ctx) {$/;"	f	function:Worker::collect_tx_frames	file:
__flow_hash_from_keys	tests/flow_dissector.c	/^uint32_t __flow_hash_from_keys(const struct flow_keys *keys,$/;"	f	typeref:typename:uint32_t
__has_include	build/CMakeFiles/3.28.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^#  define __has_include(/;"	d	file:
_fields_	tests/log_skb_hash_with_key.py	/^    _fields_ = [$/;"	v	class:Ev
_fields_	tests/log_udp_hash.py	/^    _fields_ = [$/;"	v	class:Ev
_filter_icmp_cpp_anchor	filters/filter_icmp.cpp	/^static int _filter_icmp_cpp_anchor = 0;$/;"	v	typeref:typename:int	file:
_filter_ipv4_cpp_anchor	filters/filter_ipv4.cpp	/^static int _filter_ipv4_cpp_anchor = 0;$/;"	v	typeref:typename:int	file:
_filter_tcp_cpp_anchor	filters/filter_tcp.cpp	/^static int _filter_tcp_cpp_anchor = 0;$/;"	v	typeref:typename:int	file:
_filter_udp_cpp_anchor	filters/filter_udp.cpp	/^static int _filter_udp_cpp_anchor = 0;$/;"	v	typeref:typename:int	file:
add_static_icmp_mapping	nat/nat.cpp	/^void Nat::add_static_icmp_mapping(uint32_t prv_ip, uint16_t private_id, uint32_t pub_ip,$/;"	f	class:Nat	typeref:typename:void
add_static_ip_mapping	nat/nat.cpp	/^void Nat::add_static_ip_mapping(uint32_t prv_ip, uint32_t pub_ip) {$/;"	f	class:Nat	typeref:typename:void
add_static_mapping	nat/nat.cpp	/^void Nat::add_static_mapping(uint32_t prv_ip, uint16_t private_port, uint8_t protocol,$/;"	f	class:Nat	typeref:typename:void
add_static_tcp_mapping	nat/nat.cpp	/^void Nat::add_static_tcp_mapping(uint32_t prv_ip, uint16_t private_port, uint32_t pub_ip,$/;"	f	class:Nat	typeref:typename:void
add_static_udp_mapping	nat/nat.cpp	/^void Nat::add_static_udp_mapping(uint32_t prv_ip, uint16_t private_port, uint32_t pub_ip,$/;"	f	class:Nat	typeref:typename:void
addr_type	tests/flow_dissector.h	/^    uint16_t addr_type;$/;"	m	struct:flow_dissector_key_control	typeref:typename:uint16_t
addrs	tests/flow_dissector.h	/^    struct flow_dissector_key_addrs   addrs;$/;"	m	struct:flow_keys	typeref:struct:flow_dissector_key_addrs
adjust_checksum16	nat/checksum_utils.hpp	/^inline uint16_t adjust_checksum16(uint16_t checksum_net, uint16_t old_host,$/;"	f	namespace:nat::detail	typeref:typename:uint16_t
adjust_checksum32	nat/checksum_utils.hpp	/^inline uint16_t adjust_checksum32(uint16_t checksum_net, uint32_t old_host,$/;"	f	namespace:nat::detail	typeref:typename:uint16_t
af_packet_io	af_packet_io/checksum_utils.cpp	/^namespace af_packet_io {$/;"	n	file:
af_packet_io	af_packet_io/checksum_utils.h	/^namespace af_packet_io {$/;"	n
af_packet_io	af_packet_io/io_context.cpp	/^namespace af_packet_io {$/;"	n	file:
af_packet_io	af_packet_io/io_context.hpp	/^namespace af_packet_io {$/;"	n
af_packet_io	af_packet_io/packet_socket.cpp	/^namespace af_packet_io {$/;"	n	file:
af_packet_io	af_packet_io/packet_socket.hpp	/^namespace af_packet_io {$/;"	n
af_packet_io	af_packet_io/ring_buffer.cpp	/^namespace af_packet_io {$/;"	n	file:
af_packet_io	af_packet_io/ring_buffer.hpp	/^namespace af_packet_io {$/;"	n
af_packet_io/checksum_utils.cpp.i	build/Makefile	/^af_packet_io\/checksum_utils.cpp.i:$/;"	t
af_packet_io/checksum_utils.cpp.o	build/Makefile	/^af_packet_io\/checksum_utils.cpp.o:$/;"	t
af_packet_io/checksum_utils.cpp.s	build/Makefile	/^af_packet_io\/checksum_utils.cpp.s:$/;"	t
af_packet_io/checksum_utils.i	build/Makefile	/^af_packet_io\/checksum_utils.i: af_packet_io\/checksum_utils.cpp.i$/;"	t
af_packet_io/checksum_utils.o	build/Makefile	/^af_packet_io\/checksum_utils.o: af_packet_io\/checksum_utils.cpp.o$/;"	t
af_packet_io/checksum_utils.s	build/Makefile	/^af_packet_io\/checksum_utils.s: af_packet_io\/checksum_utils.cpp.s$/;"	t
af_packet_io/io_context.cpp.i	build/Makefile	/^af_packet_io\/io_context.cpp.i:$/;"	t
af_packet_io/io_context.cpp.o	build/Makefile	/^af_packet_io\/io_context.cpp.o:$/;"	t
af_packet_io/io_context.cpp.s	build/Makefile	/^af_packet_io\/io_context.cpp.s:$/;"	t
af_packet_io/io_context.i	build/Makefile	/^af_packet_io\/io_context.i: af_packet_io\/io_context.cpp.i$/;"	t
af_packet_io/io_context.o	build/Makefile	/^af_packet_io\/io_context.o: af_packet_io\/io_context.cpp.o$/;"	t
af_packet_io/io_context.s	build/Makefile	/^af_packet_io\/io_context.s: af_packet_io\/io_context.cpp.s$/;"	t
af_packet_io/packet_socket.cpp.i	build/Makefile	/^af_packet_io\/packet_socket.cpp.i:$/;"	t
af_packet_io/packet_socket.cpp.o	build/Makefile	/^af_packet_io\/packet_socket.cpp.o:$/;"	t
af_packet_io/packet_socket.cpp.s	build/Makefile	/^af_packet_io\/packet_socket.cpp.s:$/;"	t
af_packet_io/packet_socket.i	build/Makefile	/^af_packet_io\/packet_socket.i: af_packet_io\/packet_socket.cpp.i$/;"	t
af_packet_io/packet_socket.o	build/Makefile	/^af_packet_io\/packet_socket.o: af_packet_io\/packet_socket.cpp.o$/;"	t
af_packet_io/packet_socket.s	build/Makefile	/^af_packet_io\/packet_socket.s: af_packet_io\/packet_socket.cpp.s$/;"	t
af_packet_io/ring_buffer.cpp.i	build/Makefile	/^af_packet_io\/ring_buffer.cpp.i:$/;"	t
af_packet_io/ring_buffer.cpp.o	build/Makefile	/^af_packet_io\/ring_buffer.cpp.o:$/;"	t
af_packet_io/ring_buffer.cpp.s	build/Makefile	/^af_packet_io\/ring_buffer.cpp.s:$/;"	t
af_packet_io/ring_buffer.i	build/Makefile	/^af_packet_io\/ring_buffer.i: af_packet_io\/ring_buffer.cpp.i$/;"	t
af_packet_io/ring_buffer.o	build/Makefile	/^af_packet_io\/ring_buffer.o: af_packet_io\/ring_buffer.cpp.o$/;"	t
af_packet_io/ring_buffer.s	build/Makefile	/^af_packet_io\/ring_buffer.s: af_packet_io\/ring_buffer.cpp.s$/;"	t
af_packet_runner	CMakeLists.txt	/^add_executable(af_packet_runner ${AF_PACKET_RUNNER_SRC})$/;"	t
af_packet_runner	build/Makefile	/^af_packet_runner: cmake_check_build_system$/;"	t
af_packet_runner/fast	build/Makefile	/^af_packet_runner\/fast:$/;"	t
all	build/Makefile	/^all: cmake_check_build_system$/;"	t
applied_rx_	af_packet_io/io_context.hpp	/^    RingConfig applied_rx_{};$/;"	m	class:af_packet_io::IoContext	typeref:typename:RingConfig
applied_tx_	af_packet_io/io_context.hpp	/^    RingConfig applied_tx_{};$/;"	m	class:af_packet_io::IoContext	typeref:typename:RingConfig
apply_filters	main.cpp	/^bool apply_filters(const Chain& chain) {$/;"	f	typeref:typename:bool
apps/af_packet_runner.cpp.i	build/Makefile	/^apps\/af_packet_runner.cpp.i:$/;"	t
apps/af_packet_runner.cpp.o	build/Makefile	/^apps\/af_packet_runner.cpp.o:$/;"	t
apps/af_packet_runner.cpp.s	build/Makefile	/^apps\/af_packet_runner.cpp.s:$/;"	t
apps/af_packet_runner.i	build/Makefile	/^apps\/af_packet_runner.i: apps\/af_packet_runner.cpp.i$/;"	t
apps/af_packet_runner.o	build/Makefile	/^apps\/af_packet_runner.o: apps\/af_packet_runner.cpp.o$/;"	t
apps/af_packet_runner.s	build/Makefile	/^apps\/af_packet_runner.s: apps\/af_packet_runner.cpp.s$/;"	t
area_	af_packet_io/ring_buffer.hpp	/^    void* area_ = nullptr;$/;"	m	class:af_packet_io::RingView	typeref:typename:void *
b	tests/log_skb_hash_with_key.py	/^b = BPF(text=prog)$/;"	v
b	tests/log_udp_hash.py	/^b = BPF(text=prog)$/;"	v
basic	tests/flow_dissector.h	/^    struct flow_dissector_key_basic   basic;$/;"	m	struct:flow_keys	typeref:struct:flow_dissector_key_basic
bind_interface	af_packet_io/packet_socket.cpp	/^void PacketSocket::bind_interface(const std::string& ifname, uint16_t protocol) {$/;"	f	class:af_packet_io::PacketSocket	typeref:typename:void
block_at	af_packet_io/ring_buffer.cpp	/^tpacket_block_desc* RingView::block_at(size_t index) const {$/;"	f	class:af_packet_io::RingView	typeref:typename:tpacket_block_desc *
block_count	af_packet_io/packet_socket.hpp	/^    uint32_t block_count = 8;$/;"	m	struct:af_packet_io::RingConfig	typeref:typename:uint32_t
block_count	af_packet_io/ring_buffer.hpp	/^    size_t block_count() const noexcept { return block_count_; }$/;"	f	class:af_packet_io::RingView	typeref:typename:size_t
block_count_	af_packet_io/ring_buffer.hpp	/^    size_t block_count_ = 0;$/;"	m	class:af_packet_io::RingView	typeref:typename:size_t
block_size	af_packet_io/packet_socket.hpp	/^    uint32_t block_size = 1 << 22;  \/\/ 4 MiB$/;"	m	struct:af_packet_io::RingConfig	typeref:typename:uint32_t
block_size	af_packet_io/ring_buffer.hpp	/^    size_t block_size() const noexcept { return block_size_; }$/;"	f	class:af_packet_io::RingView	typeref:typename:size_t
block_size_	af_packet_io/ring_buffer.hpp	/^    size_t block_size_ = 0;$/;"	m	class:af_packet_io::RingView	typeref:typename:size_t
bring_up_environment	scripts/setup_veth_env.sh	/^bring_up_environment() {$/;"	f
buffer	common/worker.hpp	/^        std::vector<uint8_t> buffer;$/;"	m	struct:Worker::FramePayload	typeref:typename:std::vector<uint8_t>
buffer	common/worker.hpp	/^        std::vector<uint8_t> buffer;$/;"	m	struct:Worker::TxFrame	typeref:typename:std::vector<uint8_t>
build_nat_config	apps/af_packet_runner.cpp	/^NatConfig build_nat_config(const std::string& priv, const std::string& pub) {$/;"	f	namespace:__anon014c6b900111	typeref:typename:NatConfig
calculate_netmask	common/netset.cpp	/^uint32_t Netset::calculate_netmask(int prefix_len) {$/;"	f	class:Netset	typeref:typename:uint32_t
capacity	nat/nat.h	/^        uint32_t capacity = 0;$/;"	m	struct:Nat::MappingTable	typeref:typename:uint32_t
cfg_	af_packet_io/io_context.hpp	/^    IoConfig cfg_;$/;"	m	class:af_packet_io::IoContext	typeref:typename:IoConfig
cfg_	common/worker.hpp	/^    WorkerPipelineConfig cfg_;$/;"	m	class:Worker	typeref:typename:WorkerPipelineConfig
checksum_after_id_change	nat/nat_icmp.cpp	/^auto checksum_after_id_change(uint16_t checksum_net, uint16_t old_id, uint16_t new_id) {$/;"	f	namespace:__anon97f778730111	typeref:typename:auto
checksum_after_ip_change	nat/nat_icmp.cpp	/^auto checksum_after_ip_change(uint16_t checksum_net, uint32_t old_ip, uint32_t new_ip) {$/;"	f	namespace:__anon97f778730111	typeref:typename:auto
checksum_after_ip_change	nat/nat_tcp.cpp	/^auto checksum_after_ip_change(uint16_t checksum_net, uint32_t old_ip, uint32_t new_ip) {$/;"	f	namespace:__anon43ea9b910111	typeref:typename:auto
checksum_after_ip_change	nat/nat_udp.cpp	/^auto checksum_after_ip_change(uint16_t checksum_net, uint32_t old_ip, uint32_t new_ip) {$/;"	f	namespace:__anon933a00f30111	typeref:typename:auto
checksum_after_port_change	nat/nat_tcp.cpp	/^auto checksum_after_port_change(uint16_t checksum_net, uint16_t old_port, uint16_t new_port) {$/;"	f	namespace:__anon43ea9b910111	typeref:typename:auto
checksum_after_port_change	nat/nat_udp.cpp	/^auto checksum_after_port_change(uint16_t checksum_net, uint16_t old_port, uint16_t new_port) {$/;"	f	namespace:__anon933a00f30111	typeref:typename:auto
checksum_block_decrement	nat/checksum_utils.hpp	/^inline bool checksum_block_decrement(uint16_t& partial, uint16_t checksum_host, bool initial,$/;"	f	namespace:nat::detail	typeref:typename:bool
checksum_block_increment	nat/checksum_utils.hpp	/^inline bool checksum_block_increment(uint16_t& checksum_host, uint16_t partial, bool final,$/;"	f	namespace:nat::detail	typeref:typename:bool
choose_port_for_cpu	nat/endpoint_base.hpp	/^    uint16_t choose_port_for_cpu(uint32_t desired_cpu, uint16_t rmin, uint16_t rmax,$/;"	f	class:EndpointBase	typeref:typename:uint16_t
cidr_ip	scripts/setup_veth_env.sh	/^cidr_ip() {$/;"	f
cidr_network	scripts/setup_veth_env.sh	/^cidr_network() {$/;"	f
clean	build/Makefile	/^clean:$/;"	t
clean/fast	build/Makefile	/^clean\/fast: clean$/;"	t
clear_static_mappings	nat/nat.cpp	/^void Nat::clear_static_mappings() {$/;"	f	class:Nat	typeref:typename:void
close	af_packet_io/packet_socket.cpp	/^void PacketSocket::close() {$/;"	f	class:af_packet_io::PacketSocket	typeref:typename:void
cmake_check_build_system	build/Makefile	/^cmake_check_build_system:$/;"	t
cmake_force	build/Makefile	/^cmake_force:$/;"	t
collect_tx_frames	common/worker.cpp	/^std::vector<std::vector<uint8_t>> Worker::collect_tx_frames() {$/;"	f	class:Worker	typeref:typename:std::vector<std::vector<uint8_t>>
colorForFlag	common/logger.h	/^inline const char* colorForFlag(uint32_t flag) {$/;"	f	typeref:typename:const char *
command	build/compile_commands.json	/^  "command": "\/usr\/bin\/c++  -I\/home\/grigory\/sweetspot_cpp\/include -I\/home\/grigory\/swee/;"	s	object:0
command	build/compile_commands.json	/^  "command": "\/usr\/bin\/c++  -I\/home\/grigory\/sweetspot_cpp\/include -I\/home\/grigory\/swee/;"	s	object:1
command	build/compile_commands.json	/^  "command": "\/usr\/bin\/c++  -I\/home\/grigory\/sweetspot_cpp\/include -I\/home\/grigory\/swee/;"	s	object:10
command	build/compile_commands.json	/^  "command": "\/usr\/bin\/c++  -I\/home\/grigory\/sweetspot_cpp\/include -I\/home\/grigory\/swee/;"	s	object:11
command	build/compile_commands.json	/^  "command": "\/usr\/bin\/c++  -I\/home\/grigory\/sweetspot_cpp\/include -I\/home\/grigory\/swee/;"	s	object:12
command	build/compile_commands.json	/^  "command": "\/usr\/bin\/c++  -I\/home\/grigory\/sweetspot_cpp\/include -I\/home\/grigory\/swee/;"	s	object:2
command	build/compile_commands.json	/^  "command": "\/usr\/bin\/c++  -I\/home\/grigory\/sweetspot_cpp\/include -I\/home\/grigory\/swee/;"	s	object:3
command	build/compile_commands.json	/^  "command": "\/usr\/bin\/c++  -I\/home\/grigory\/sweetspot_cpp\/include -I\/home\/grigory\/swee/;"	s	object:4
command	build/compile_commands.json	/^  "command": "\/usr\/bin\/c++  -I\/home\/grigory\/sweetspot_cpp\/include -I\/home\/grigory\/swee/;"	s	object:5
command	build/compile_commands.json	/^  "command": "\/usr\/bin\/c++  -I\/home\/grigory\/sweetspot_cpp\/include -I\/home\/grigory\/swee/;"	s	object:6
command	build/compile_commands.json	/^  "command": "\/usr\/bin\/c++  -I\/home\/grigory\/sweetspot_cpp\/include -I\/home\/grigory\/swee/;"	s	object:7
command	build/compile_commands.json	/^  "command": "\/usr\/bin\/c++  -I\/home\/grigory\/sweetspot_cpp\/include -I\/home\/grigory\/swee/;"	s	object:8
command	build/compile_commands.json	/^  "command": "\/usr\/bin\/c++  -I\/home\/grigory\/sweetspot_cpp\/include -I\/home\/grigory\/swee/;"	s	object:9
committer/committer_icmp.cpp.i	build/Makefile	/^committer\/committer_icmp.cpp.i:$/;"	t
committer/committer_icmp.cpp.o	build/Makefile	/^committer\/committer_icmp.cpp.o:$/;"	t
committer/committer_icmp.cpp.s	build/Makefile	/^committer\/committer_icmp.cpp.s:$/;"	t
committer/committer_icmp.i	build/Makefile	/^committer\/committer_icmp.i: committer\/committer_icmp.cpp.i$/;"	t
committer/committer_icmp.o	build/Makefile	/^committer\/committer_icmp.o: committer\/committer_icmp.cpp.o$/;"	t
committer/committer_icmp.s	build/Makefile	/^committer\/committer_icmp.s: committer\/committer_icmp.cpp.s$/;"	t
committer/committer_ipv4.cpp.i	build/Makefile	/^committer\/committer_ipv4.cpp.i:$/;"	t
committer/committer_ipv4.cpp.o	build/Makefile	/^committer\/committer_ipv4.cpp.o:$/;"	t
committer/committer_ipv4.cpp.s	build/Makefile	/^committer\/committer_ipv4.cpp.s:$/;"	t
committer/committer_ipv4.i	build/Makefile	/^committer\/committer_ipv4.i: committer\/committer_ipv4.cpp.i$/;"	t
committer/committer_ipv4.o	build/Makefile	/^committer\/committer_ipv4.o: committer\/committer_ipv4.cpp.o$/;"	t
committer/committer_ipv4.s	build/Makefile	/^committer\/committer_ipv4.s: committer\/committer_ipv4.cpp.s$/;"	t
committer/committer_tcp.cpp.i	build/Makefile	/^committer\/committer_tcp.cpp.i:$/;"	t
committer/committer_tcp.cpp.o	build/Makefile	/^committer\/committer_tcp.cpp.o:$/;"	t
committer/committer_tcp.cpp.s	build/Makefile	/^committer\/committer_tcp.cpp.s:$/;"	t
committer/committer_tcp.i	build/Makefile	/^committer\/committer_tcp.i: committer\/committer_tcp.cpp.i$/;"	t
committer/committer_tcp.o	build/Makefile	/^committer\/committer_tcp.o: committer\/committer_tcp.cpp.o$/;"	t
committer/committer_tcp.s	build/Makefile	/^committer\/committer_tcp.s: committer\/committer_tcp.cpp.s$/;"	t
committer/committer_udp.cpp.i	build/Makefile	/^committer\/committer_udp.cpp.i:$/;"	t
committer/committer_udp.cpp.o	build/Makefile	/^committer\/committer_udp.cpp.o:$/;"	t
committer/committer_udp.cpp.s	build/Makefile	/^committer\/committer_udp.cpp.s:$/;"	t
committer/committer_udp.i	build/Makefile	/^committer\/committer_udp.i: committer\/committer_udp.cpp.i$/;"	t
committer/committer_udp.o	build/Makefile	/^committer\/committer_udp.o: committer\/committer_udp.cpp.o$/;"	t
committer/committer_udp.s	build/Makefile	/^committer\/committer_udp.s: committer\/committer_udp.cpp.s$/;"	t
common/netset.cpp.i	build/Makefile	/^common\/netset.cpp.i:$/;"	t
common/netset.cpp.o	build/Makefile	/^common\/netset.cpp.o:$/;"	t
common/netset.cpp.s	build/Makefile	/^common\/netset.cpp.s:$/;"	t
common/netset.i	build/Makefile	/^common\/netset.i: common\/netset.cpp.i$/;"	t
common/netset.o	build/Makefile	/^common\/netset.o: common\/netset.cpp.o$/;"	t
common/netset.s	build/Makefile	/^common\/netset.s: common\/netset.cpp.s$/;"	t
common/worker.cpp.i	build/Makefile	/^common\/worker.cpp.i:$/;"	t
common/worker.cpp.o	build/Makefile	/^common\/worker.cpp.o:$/;"	t
common/worker.cpp.s	build/Makefile	/^common\/worker.cpp.s:$/;"	t
common/worker.i	build/Makefile	/^common\/worker.i: common\/worker.cpp.i$/;"	t
common/worker.o	build/Makefile	/^common\/worker.o: common\/worker.cpp.o$/;"	t
common/worker.s	build/Makefile	/^common\/worker.s: common\/worker.cpp.s$/;"	t
config_	nat/endpoint_base.hpp	/^    std::shared_ptr<NatConfig> config_;$/;"	m	class:EndpointBase	typeref:typename:std::shared_ptr<NatConfig>
configure_fanout	af_packet_io/packet_socket.cpp	/^void PacketSocket::configure_fanout(const FanoutConfig& cfg) {$/;"	f	class:af_packet_io::PacketSocket	typeref:typename:void
configure_ring	af_packet_io/packet_socket.cpp	/^void PacketSocket::configure_ring(Direction dir, const RingConfig& cfg) {$/;"	f	class:af_packet_io::PacketSocket	typeref:typename:void
configured	nat/nat.h	/^    bool configured() const noexcept { return ready_; }$/;"	f	class:Nat	typeref:typename:bool
consistentify_v4	common/jenkins_hash.hpp	/^inline void consistentify_v4(uint32_t& saddr_be, uint32_t& daddr_be,$/;"	f	namespace:CPUFanoutHash	typeref:typename:void
contains	common/netset.cpp	/^bool Netset::contains(uint32_t ip) const {$/;"	f	class:Netset	typeref:typename:bool
control	tests/flow_dissector.h	/^    struct flow_dissector_key_control control;$/;"	m	struct:flow_keys	typeref:struct:flow_dissector_key_control
cpu_count_	nat/endpoint_base.hpp	/^    uint32_t cpu_count_;$/;"	m	class:EndpointBase	typeref:typename:uint32_t
create	common/netset.cpp	/^std::shared_ptr<Netset> Netset::create(const std::string& cidrs) {$/;"	f	class:Netset	typeref:typename:std::shared_ptr<Netset>
cv_	common/logger.h	/^    std::condition_variable cv_;$/;"	m	class:Logger	typeref:typename:std::condition_variable
daddr_be	tests/test_udp_hash.cpp	/^    uint32_t daddr_be;$/;"	m	struct:Record	typeref:typename:uint32_t	file:
default_target	build/Makefile	/^default_target: all$/;"	t
depend	build/Makefile	/^depend:$/;"	t
destroy	common/netset.cpp	/^void Netset::destroy() {$/;"	f	class:Netset	typeref:typename:void
detail	nat/checksum_utils.hpp	/^namespace nat::detail {$/;"	n	namespace:nat
directory	build/compile_commands.json	/^  "directory": "\/home\/grigory\/sweetspot_cpp\/build",$/;"	s	object:0
directory	build/compile_commands.json	/^  "directory": "\/home\/grigory\/sweetspot_cpp\/build",$/;"	s	object:1
directory	build/compile_commands.json	/^  "directory": "\/home\/grigory\/sweetspot_cpp\/build",$/;"	s	object:10
directory	build/compile_commands.json	/^  "directory": "\/home\/grigory\/sweetspot_cpp\/build",$/;"	s	object:11
directory	build/compile_commands.json	/^  "directory": "\/home\/grigory\/sweetspot_cpp\/build",$/;"	s	object:12
directory	build/compile_commands.json	/^  "directory": "\/home\/grigory\/sweetspot_cpp\/build",$/;"	s	object:2
directory	build/compile_commands.json	/^  "directory": "\/home\/grigory\/sweetspot_cpp\/build",$/;"	s	object:3
directory	build/compile_commands.json	/^  "directory": "\/home\/grigory\/sweetspot_cpp\/build",$/;"	s	object:4
directory	build/compile_commands.json	/^  "directory": "\/home\/grigory\/sweetspot_cpp\/build",$/;"	s	object:5
directory	build/compile_commands.json	/^  "directory": "\/home\/grigory\/sweetspot_cpp\/build",$/;"	s	object:6
directory	build/compile_commands.json	/^  "directory": "\/home\/grigory\/sweetspot_cpp\/build",$/;"	s	object:7
directory	build/compile_commands.json	/^  "directory": "\/home\/grigory\/sweetspot_cpp\/build",$/;"	s	object:8
directory	build/compile_commands.json	/^  "directory": "\/home\/grigory\/sweetspot_cpp\/build",$/;"	s	object:9
disable_offloads	scripts/setup_veth_env.sh	/^disable_offloads() {$/;"	f
dport_be	tests/test_udp_hash.cpp	/^    uint16_t dport_be;$/;"	m	struct:Record	typeref:typename:uint16_t	file:
dst	include/ethernet.h	/^struct EthernetHeader { uint8_t dst[6]; uint8_t src[6]; uint16_t ethertype; };$/;"	m	struct:EthernetHeader	typeref:typename:uint8_t[6]
dst	tests/flow_dissector.h	/^            struct in6_addr dst;$/;"	m	struct:flow_dissector_key_addrs::__anon058a5124010a::__anon058a51240308	typeref:struct:in6_addr
dst	tests/flow_dissector.h	/^            uint32_t dst;$/;"	m	struct:flow_dissector_key_addrs::__anon058a5124010a::__anon058a51240208	typeref:typename:uint32_t
dst	tests/flow_dissector.h	/^    uint16_t dst;$/;"	m	struct:flow_dissector_key_ports	typeref:typename:uint16_t
dst_ip	include/icmp.h	/^        uint32_t dst_ip;$/;"	m	struct:ICMPHeader::Flow	typeref:typename:uint32_t
dst_ip	include/ipv4.h	/^        uint32_t dst_ip;$/;"	m	struct:IPv4Header::Flow	typeref:typename:uint32_t
dst_ip	include/tcp.h	/^        uint32_t dst_ip;$/;"	m	struct:TCPHeader::Flow	typeref:typename:uint32_t
dst_ip	include/udp.h	/^        uint32_t dst_ip;$/;"	m	struct:UDPHeader::Flow	typeref:typename:uint32_t
dst_ip	nat/nat.h	/^        uint32_t dst_ip = 0;$/;"	m	struct:Nat::FlowKey	typeref:typename:uint32_t
dst_ip	nat/nat.h	/^        uint32_t dst_ip = 0;$/;"	m	struct:Nat::PubKey	typeref:typename:uint32_t
dst_port	include/tcp.h	/^        uint16_t dst_port;$/;"	m	struct:TCPHeader::Flow	typeref:typename:uint16_t
dst_port	include/udp.h	/^        uint16_t dst_port;$/;"	m	struct:UDPHeader::Flow	typeref:typename:uint16_t
dst_port	nat/nat.h	/^        uint16_t dst_port = 0;$/;"	m	struct:Nat::FlowKey	typeref:typename:uint16_t
dst_port	nat/nat.h	/^        uint16_t dst_port = 0;$/;"	m	struct:Nat::PubKey	typeref:typename:uint16_t
edit_cache	build/Makefile	/^edit_cache:$/;"	t
edit_cache/fast	build/Makefile	/^edit_cache\/fast: edit_cache$/;"	t
enable_io	common/worker.hpp	/^    bool enable_io = true;$/;"	m	struct:WorkerPipelineConfig	typeref:typename:bool
enable_qdisc_bypass	af_packet_io/packet_socket.cpp	/^void PacketSocket::enable_qdisc_bypass(bool enable) {$/;"	f	class:af_packet_io::PacketSocket	typeref:typename:void
enqueue	common/logger.h	/^    void enqueue(uint32_t flag, std::string&& msg) {$/;"	f	class:Logger	typeref:typename:void
enqueue_tx	common/worker.cpp	/^void Worker::enqueue_tx(InterfaceContext& ctx, std::vector<uint8_t>&& frame, size_t net_offset,$/;"	f	class:Worker	typeref:typename:void
ensure_icmp_mapping	nat/nat.cpp	/^Nat::Translation Nat::ensure_icmp_mapping(uint32_t prv_ip, uint32_t dst_ip, uint16_t ident,$/;"	f	class:Nat	typeref:typename:Nat::Translation
ensure_ip_mapping	nat/nat.cpp	/^Nat::Translation Nat::ensure_ip_mapping(uint32_t prv_ip, uint32_t dst_ip, uint8_t protocol) {$/;"	f	class:Nat	typeref:typename:Nat::Translation
ensure_open	af_packet_io/packet_socket.cpp	/^void PacketSocket::ensure_open() const {$/;"	f	class:af_packet_io::PacketSocket	typeref:typename:void
ensure_tcp_mapping	nat/nat.cpp	/^Nat::Translation Nat::ensure_tcp_mapping(uint32_t prv_ip, uint32_t dst_ip, uint16_t src_port,$/;"	f	class:Nat	typeref:typename:Nat::Translation
ensure_udp_mapping	nat/nat.cpp	/^Nat::Translation Nat::ensure_udp_mapping(uint32_t prv_ip, uint32_t dst_ip, uint16_t src_port,$/;"	f	class:Nat	typeref:typename:Nat::Translation
ethertype	include/ethernet.h	/^struct EthernetHeader { uint8_t dst[6]; uint8_t src[6]; uint16_t ethertype; };$/;"	m	struct:EthernetHeader	typeref:typename:uint16_t
evict_if_needed	nat/nat.cpp	/^void Nat::evict_if_needed(MappingTable& table) {$/;"	f	class:Nat	typeref:typename:void
fanout	af_packet_io/io_context.hpp	/^    FanoutParams fanout{0, PACKET_FANOUT_HASH, 0};$/;"	m	struct:af_packet_io::IoConfig	typeref:typename:FanoutParams
fd	af_packet_io/packet_socket.hpp	/^    int fd() const noexcept { return fd_; }$/;"	f	class:af_packet_io::PacketSocket	typeref:typename:int
fd_	af_packet_io/packet_socket.hpp	/^    int fd_ = -1;$/;"	m	class:af_packet_io::PacketSocket	typeref:typename:int
file	build/compile_commands.json	/^  "file": "\/home\/grigory\/sweetspot_cpp\/filters\/filter_icmp.cpp",$/;"	s	object:0
file	build/compile_commands.json	/^  "file": "\/home\/grigory\/sweetspot_cpp\/filters\/filter_ipv4.cpp",$/;"	s	object:1
file	build/compile_commands.json	/^  "file": "\/home\/grigory\/sweetspot_cpp\/filters\/filter_tcp.cpp",$/;"	s	object:2
file	build/compile_commands.json	/^  "file": "\/home\/grigory\/sweetspot_cpp\/filters\/filter_udp.cpp",$/;"	s	object:3
file	build/compile_commands.json	/^  "file": "\/home\/grigory\/sweetspot_cpp\/main.cpp",$/;"	s	object:4
file	build/compile_commands.json	/^  "file": "\/home\/grigory\/sweetspot_cpp\/nat\/nat_icmp.cpp",$/;"	s	object:5
file	build/compile_commands.json	/^  "file": "\/home\/grigory\/sweetspot_cpp\/nat\/nat_ipv4.cpp",$/;"	s	object:6
file	build/compile_commands.json	/^  "file": "\/home\/grigory\/sweetspot_cpp\/nat\/nat_tcp.cpp",$/;"	s	object:7
file	build/compile_commands.json	/^  "file": "\/home\/grigory\/sweetspot_cpp\/nat\/nat_udp.cpp",$/;"	s	object:8
file	build/compile_commands.json	/^  "file": "\/home\/grigory\/sweetspot_cpp\/parsers\/parser_icmp.cpp",$/;"	s	object:9
file	build/compile_commands.json	/^  "file": "\/home\/grigory\/sweetspot_cpp\/parsers\/parser_ipv4.cpp",$/;"	s	object:10
file	build/compile_commands.json	/^  "file": "\/home\/grigory\/sweetspot_cpp\/parsers\/parser_tcp.cpp",$/;"	s	object:11
file	build/compile_commands.json	/^  "file": "\/home\/grigory\/sweetspot_cpp\/parsers\/parser_udp.cpp",$/;"	s	object:12
filters/filter_icmp.cpp.i	build/Makefile	/^filters\/filter_icmp.cpp.i:$/;"	t
filters/filter_icmp.cpp.o	build/Makefile	/^filters\/filter_icmp.cpp.o:$/;"	t
filters/filter_icmp.cpp.s	build/Makefile	/^filters\/filter_icmp.cpp.s:$/;"	t
filters/filter_icmp.i	build/Makefile	/^filters\/filter_icmp.i: filters\/filter_icmp.cpp.i$/;"	t
filters/filter_icmp.o	build/Makefile	/^filters\/filter_icmp.o: filters\/filter_icmp.cpp.o$/;"	t
filters/filter_icmp.s	build/Makefile	/^filters\/filter_icmp.s: filters\/filter_icmp.cpp.s$/;"	t
filters/filter_ipv4.cpp.i	build/Makefile	/^filters\/filter_ipv4.cpp.i:$/;"	t
filters/filter_ipv4.cpp.o	build/Makefile	/^filters\/filter_ipv4.cpp.o:$/;"	t
filters/filter_ipv4.cpp.s	build/Makefile	/^filters\/filter_ipv4.cpp.s:$/;"	t
filters/filter_ipv4.i	build/Makefile	/^filters\/filter_ipv4.i: filters\/filter_ipv4.cpp.i$/;"	t
filters/filter_ipv4.o	build/Makefile	/^filters\/filter_ipv4.o: filters\/filter_ipv4.cpp.o$/;"	t
filters/filter_ipv4.s	build/Makefile	/^filters\/filter_ipv4.s: filters\/filter_ipv4.cpp.s$/;"	t
filters/filter_tcp.cpp.i	build/Makefile	/^filters\/filter_tcp.cpp.i:$/;"	t
filters/filter_tcp.cpp.o	build/Makefile	/^filters\/filter_tcp.cpp.o:$/;"	t
filters/filter_tcp.cpp.s	build/Makefile	/^filters\/filter_tcp.cpp.s:$/;"	t
filters/filter_tcp.i	build/Makefile	/^filters\/filter_tcp.i: filters\/filter_tcp.cpp.i$/;"	t
filters/filter_tcp.o	build/Makefile	/^filters\/filter_tcp.o: filters\/filter_tcp.cpp.o$/;"	t
filters/filter_tcp.s	build/Makefile	/^filters\/filter_tcp.s: filters\/filter_tcp.cpp.s$/;"	t
filters/filter_udp.cpp.i	build/Makefile	/^filters\/filter_udp.cpp.i:$/;"	t
filters/filter_udp.cpp.o	build/Makefile	/^filters\/filter_udp.cpp.o:$/;"	t
filters/filter_udp.cpp.s	build/Makefile	/^filters\/filter_udp.cpp.s:$/;"	t
filters/filter_udp.i	build/Makefile	/^filters\/filter_udp.i: filters\/filter_udp.cpp.i$/;"	t
filters/filter_udp.o	build/Makefile	/^filters\/filter_udp.o: filters\/filter_udp.cpp.o$/;"	t
filters/filter_udp.s	build/Makefile	/^filters\/filter_udp.s: filters\/filter_udp.cpp.s$/;"	t
find_icmp_reply	nat/nat.cpp	/^std::optional<Nat::Translation> Nat::find_icmp_reply(uint32_t pub_ip, uint32_t remote_ip,$/;"	f	class:Nat	typeref:typename:std::optional<Nat::Translation>
find_inbound	nat/nat.cpp	/^std::optional<Nat::Translation> Nat::find_inbound(MappingTable& table, const PubKey& key) {$/;"	f	class:Nat	typeref:typename:std::optional<Nat::Translation>
find_ip_reply	nat/nat.cpp	/^std::optional<Nat::Translation> Nat::find_ip_reply(uint32_t pub_ip, uint32_t remote_ip,$/;"	f	class:Nat	typeref:typename:std::optional<Nat::Translation>
find_tcp_reply	nat/nat.cpp	/^std::optional<Nat::Translation> Nat::find_tcp_reply(uint32_t pub_ip, uint32_t remote_ip,$/;"	f	class:Nat	typeref:typename:std::optional<Nat::Translation>
find_udp_reply	nat/nat.cpp	/^std::optional<Nat::Translation> Nat::find_udp_reply(uint32_t pub_ip, uint32_t remote_ip,$/;"	f	class:Nat	typeref:typename:std::optional<Nat::Translation>
flags	af_packet_io/io_context.hpp	/^    uint16_t flags;$/;"	m	struct:af_packet_io::FanoutParams	typeref:typename:uint16_t
flags	af_packet_io/packet_socket.hpp	/^    uint16_t flags = 0;  \/\/ PACKET_FANOUT_FLAG_*$/;"	m	struct:af_packet_io::FanoutConfig	typeref:typename:uint16_t
flags_	common/logger.h	/^    uint32_t flags_ = DEBUG_ALL;$/;"	m	class:Logger	typeref:typename:uint32_t
flow	nat/nat.h	/^        FlowKey flow;$/;"	m	struct:Nat::MappingEntry	typeref:typename:FlowKey
flow	nat/nat.h	/^        FlowKey flow;$/;"	m	struct:Nat::Translation	typeref:typename:FlowKey
flow_dissector_key_addrs	tests/flow_dissector.h	/^struct flow_dissector_key_addrs {$/;"	s
flow_dissector_key_basic	tests/flow_dissector.h	/^struct flow_dissector_key_basic {$/;"	s
flow_dissector_key_control	tests/flow_dissector.h	/^struct flow_dissector_key_control {$/;"	s
flow_dissector_key_ports	tests/flow_dissector.h	/^struct flow_dissector_key_ports {$/;"	s
flow_keys	tests/flow_dissector.h	/^struct flow_keys {$/;"	s
flow_keys_hash_length	tests/flow_dissector.c	/^size_t flow_keys_hash_length(const struct flow_keys *flow)$/;"	f	typeref:typename:size_t
flow_keys_hash_start	tests/flow_dissector.c	/^void *flow_keys_hash_start(const struct flow_keys *flow)$/;"	f	typeref:typename:void *
fold_sum	nat/checksum_utils.hpp	/^inline uint16_t fold_sum(uint32_t sum) {$/;"	f	namespace:nat::detail	typeref:typename:uint16_t
for_each	chain/header_chain.h	/^    template <typename F> void for_each(F&& func) const {$/;"	f	class:HeaderChainTuple	typeref:typename:void
forward	nat/nat.h	/^        std::unordered_map<FlowKey, MappingEntry, FlowKeyHash> forward;$/;"	m	struct:Nat::MappingTable	typeref:typename:std::unordered_map<FlowKey,MappingEntry,FlowKeyHash>
forward_fn_	common/worker.hpp	/^    std::function<void(uint32_t, FramePayload&&)> forward_fn_;$/;"	m	class:Worker	typeref:typename:std::function<void (uint32_t,FramePayload &&)>
frame_count	af_packet_io/packet_socket.hpp	/^    uint32_t frame_count = 0; \/\/ 0 -> auto (block_size \/ frame_size * block_count)$/;"	m	struct:af_packet_io::RingConfig	typeref:typename:uint32_t
frame_count	af_packet_io/ring_buffer.hpp	/^    size_t frame_count() const noexcept { return frame_count_; }$/;"	f	class:af_packet_io::RingView	typeref:typename:size_t
frame_count_	af_packet_io/ring_buffer.hpp	/^    size_t frame_count_ = 0;$/;"	m	class:af_packet_io::RingView	typeref:typename:size_t
frame_size	af_packet_io/packet_socket.hpp	/^    uint32_t frame_size = 2048;$/;"	m	struct:af_packet_io::RingConfig	typeref:typename:uint32_t
frame_size	af_packet_io/ring_buffer.hpp	/^    size_t frame_size() const noexcept { return frame_size_; }$/;"	f	class:af_packet_io::RingView	typeref:typename:size_t
frame_size_	af_packet_io/ring_buffer.hpp	/^    size_t frame_size_ = 0;$/;"	m	class:af_packet_io::RingView	typeref:typename:size_t
full_range_size	nat/endpoint_base.hpp	/^    static inline uint32_t full_range_size(uint16_t port_min, uint16_t port_max) {$/;"	f	class:EndpointBase	typeref:typename:uint32_t
g_stop	apps/af_packet_runner.cpp	/^std::atomic<bool> g_stop{false};$/;"	v	namespace:__anon014c6b900111	typeref:typename:std::atomic<bool>
get	chain/header_chain.h	/^    template <typename T> T* get() {$/;"	f	class:HeaderChainTuple	typeref:typename:T *
get	chain/header_chain.h	/^    template <typename T> const T* get() const {$/;"	f	class:HeaderChainTuple	typeref:typename:const T *
get_flow	chain/header_chain.h	/^    template <typename Proto> auto get_flow() const {$/;"	f	class:HeaderChainTuple	typeref:typename:auto
get_flow	include/icmp.h	/^    Flow get_flow() const {$/;"	f	struct:ICMPHeader	typeref:typename:Flow
get_flow	include/ipv4.h	/^    Flow get_flow() const {$/;"	f	struct:IPv4Header	typeref:typename:Flow
get_flow	include/tcp.h	/^    Flow get_flow() const {$/;"	f	struct:TCPHeader	typeref:typename:Flow
get_flow	include/udp.h	/^    Flow get_flow() const {$/;"	f	struct:UDPHeader	typeref:typename:Flow
get_head	common/netset.hpp	/^    std::shared_ptr<Range> get_head() const { return head; }$/;"	f	class:Netset	typeref:typename:std::shared_ptr<Range>
get_port_range	nat/endpoint_base.hpp	/^    std::pair<uint16_t, uint16_t> get_port_range(uint32_t prv_ip, uint16_t port_min,$/;"	f	class:EndpointBase	typeref:typename:std::pair<uint16_t,uint16_t>
get_unaligned_le16	common/jenkins_hash.hpp	/^static inline uint16_t get_unaligned_le16(const void* p) {$/;"	f	namespace:CPUFanoutHash	typeref:typename:uint16_t
get_unaligned_le32	common/jenkins_hash.hpp	/^static inline uint32_t get_unaligned_le32(const void* p) {$/;"	f	namespace:CPUFanoutHash	typeref:typename:uint32_t
get_unaligned_le64	common/jenkins_hash.hpp	/^static inline uint64_t get_unaligned_le64(const void* p) {$/;"	f	namespace:CPUFanoutHash	typeref:typename:uint64_t
group_id	af_packet_io/io_context.hpp	/^    uint16_t group_id;$/;"	m	struct:af_packet_io::FanoutParams	typeref:typename:uint16_t
group_id	af_packet_io/packet_socket.hpp	/^    uint16_t group_id = 0;$/;"	m	struct:af_packet_io::FanoutConfig	typeref:typename:uint16_t
handle_frame	common/worker.cpp	/^void Worker::handle_frame(FramePayload::Origin origin, uint8_t* data, size_t len,$/;"	f	class:Worker	typeref:typename:void
hash	include/icmp.h	/^    static uint32_t hash(uint32_t saddr, uint32_t daddr,$/;"	f	struct:ICMPHeader	typeref:typename:uint32_t
hash	include/ipv4.h	/^    static uint32_t hash(uint32_t saddr, uint32_t daddr, uint16_t sport = 0, uint16_t dport = 0)/;"	f	struct:IPv4Header	typeref:typename:uint32_t
hash	include/tcp.h	/^    static uint32_t hash(uint32_t saddr, uint32_t daddr,$/;"	f	struct:TCPHeader	typeref:typename:uint32_t
hash	include/udp.h	/^    static uint32_t hash(uint32_t saddr, uint32_t daddr,$/;"	f	struct:UDPHeader	typeref:typename:uint32_t
hash	nat/nat.h	/^template <> struct hash<Nat::FlowKey> {$/;"	s	namespace:std
hash	nat/nat.h	/^template <> struct hash<Nat::PubKey> {$/;"	s	namespace:std
hash_ipv4	common/jenkins_hash.hpp	/^inline uint32_t hash_ipv4(uint32_t saddr_be, uint32_t daddr_be,$/;"	f	namespace:CPUFanoutHash	typeref:typename:uint32_t
hash_mix	nat/nat.cpp	/^size_t hash_mix(uint64_t value, uint64_t salt) noexcept {$/;"	f	namespace:__anone7d278eb0111	typeref:typename:size_t
hash_thread	tests/test_workers.cpp	/^uint32_t hash_thread(uint32_t src_ip, uint16_t src_port, uint32_t dst_ip, uint16_t dst_port,$/;"	f	namespace:__anon82bf5cc40111	typeref:typename:uint32_t
hash_tuple	common/jenkins_hash.hpp	/^inline uint32_t hash_tuple(const std::tuple<uint32_t,uint32_t,uint16_t,uint16_t,uint8_t>& t) {$/;"	f	namespace:CPUFanoutHash	typeref:typename:uint32_t
hash_udp	common/jenkins_hash.hpp	/^inline uint32_t hash_udp(uint32_t saddr_be, uint32_t daddr_be,$/;"	f	namespace:CPUFanoutHash	typeref:typename:uint32_t
head	common/netset.hpp	/^    std::shared_ptr<Range> head = nullptr;$/;"	m	class:Netset	typeref:typename:std::shared_ptr<Range>
headers	chain/header_chain.h	/^    std::tuple<std::unique_ptr<Headers>...> headers{};$/;"	m	class:HeaderChainTuple	typeref:typename:std::tuple<std::unique_ptr<Headers>...>
help	build/Makefile	/^help:$/;"	t
icmp_id_max	nat/nat_config.hpp	/^    uint16_t icmp_id_max = 65535;$/;"	m	struct:NatConfig	typeref:typename:uint16_t
icmp_id_min	nat/nat_config.hpp	/^    uint16_t icmp_id_min = 1000;$/;"	m	struct:NatConfig	typeref:typename:uint16_t
icmp_table_	nat/nat.h	/^    MappingTable icmp_table_{};$/;"	m	class:Nat	typeref:typename:MappingTable
icmp_thread_capacity	nat/nat_config.hpp	/^    uint32_t icmp_thread_capacity = 1024;$/;"	m	struct:NatConfig	typeref:typename:uint32_t
icmph	include/icmp.h	/^    struct icmphdr icmph;$/;"	m	struct:ICMPHeader	typeref:struct:icmphdr
ident	include/icmp.h	/^        uint16_t ident;$/;"	m	struct:ICMPHeader::Flow	typeref:typename:uint16_t
idx	common/netset.cpp	/^uint32_t Netset::idx(uint32_t ip) const {$/;"	f	class:Netset	typeref:typename:uint32_t
ifindex	af_packet_io/packet_socket.hpp	/^    int ifindex() const noexcept { return ifindex_; }$/;"	f	class:af_packet_io::PacketSocket	typeref:typename:int
ifindex_	af_packet_io/packet_socket.hpp	/^    int ifindex_ = -1;$/;"	m	class:af_packet_io::PacketSocket	typeref:typename:int
ifr	af_packet_io/io_context.cpp	/^        struct ifreq ifr{};$/;"	s	function:af_packet_io::IoContext::init_tx_socket	file:
info_arch	build/CMakeFiles/3.28.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v	typeref:typename:char const *
info_compiler	build/CMakeFiles/3.28.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v	typeref:typename:char const *
info_cray	build/CMakeFiles/3.28.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const *info_cray = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";$/;"	v	typeref:typename:char const *
info_language_extensions_default	build/CMakeFiles/3.28.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^const char* info_language_extensions_default = "INFO" ":" "extensions_default["$/;"	v	typeref:typename:const char *
info_language_standard_default	build/CMakeFiles/3.28.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^const char* info_language_standard_default = "INFO" ":" "standard_default["$/;"	v	typeref:typename:const char *
info_platform	build/CMakeFiles/3.28.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v	typeref:typename:char const *
info_simulate	build/CMakeFiles/3.28.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";$/;"	v	typeref:typename:char const *
info_simulate_version	build/CMakeFiles/3.28.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_simulate_version[] = {$/;"	v	typeref:typename:char const[]
info_version	build/CMakeFiles/3.28.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_version[] = {$/;"	v	typeref:typename:char const[]
info_version	build/CMakeFiles/3.28.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_version = "INFO" ":" "compiler_version[" COMPILER_VERSION "]";$/;"	v	typeref:typename:char const *
info_version_internal	build/CMakeFiles/3.28.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const info_version_internal[] = {$/;"	v	typeref:typename:char const[]
info_version_internal	build/CMakeFiles/3.28.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_version_internal = "INFO" ":" "compiler_version_internal[" COMPILER_VERSION_INT/;"	v	typeref:typename:char const *
init_tx_socket	af_packet_io/io_context.cpp	/^void IoContext::init_tx_socket() {$/;"	f	class:af_packet_io::IoContext	typeref:typename:void
insert_entry	nat/nat.cpp	/^Nat::MappingEntry& Nat::insert_entry(MappingTable& table, FlowKey flow, PubKey pub) {$/;"	f	class:Nat	typeref:typename:Nat::MappingEntry &
install_signal_handlers	apps/af_packet_runner.cpp	/^void install_signal_handlers() {$/;"	f	namespace:__anon014c6b900111	typeref:typename:void
instance	common/logger.h	/^    static Logger& instance() {$/;"	f	class:Logger	typeref:typename:Logger &
io	common/worker.hpp	/^        std::unique_ptr<af_packet_io::IoContext> io;$/;"	m	struct:Worker::InterfaceContext	typeref:typename:std::unique_ptr<af_packet_io::IoContext>
io_enabled_	common/worker.hpp	/^    bool io_enabled_ = true;$/;"	m	class:Worker	typeref:typename:bool
io_priv	common/worker.hpp	/^    af_packet_io::IoConfig io_priv;$/;"	m	struct:WorkerPipelineConfig	typeref:typename:af_packet_io::IoConfig
io_pub	common/worker.hpp	/^    af_packet_io::IoConfig io_pub;$/;"	m	struct:WorkerPipelineConfig	typeref:typename:af_packet_io::IoConfig
iov	tests/rxhash.c	/^    struct iovec iov { buf, sizeof(buf) };$/;"	s	function:main	file:
ip	common/netset.cpp	/^uint32_t Netset::ip(uint32_t ip_idx) const {$/;"	f	class:Netset	typeref:typename:uint32_t
ip	tests/test_fanout.cpp	/^    uint32_t ip;$/;"	m	struct:PubKey	typeref:typename:uint32_t	file:
ip_checksum	af_packet_io/checksum_utils.cpp	/^uint16_t ip_checksum(const uint8_t* data, size_t len) {$/;"	f	namespace:af_packet_io	typeref:typename:uint16_t
ip_from_string	tests/test_nat.cpp	/^uint32_t ip_from_string(const char* str) {$/;"	f	namespace:__anone8b2175a0111	typeref:typename:uint32_t
ip_header	include/icmp.h	/^    IPv4Header* ip_header = nullptr;$/;"	m	struct:ICMPHeader	typeref:typename:IPv4Header *
ip_header	include/tcp.h	/^    IPv4Header* ip_header = nullptr;$/;"	m	struct:TCPHeader	typeref:typename:IPv4Header *
ip_header	include/udp.h	/^    IPv4Header* ip_header = nullptr;$/;"	m	struct:UDPHeader	typeref:typename:IPv4Header *
ip_max	common/netset.hpp	/^        uint32_t ip_max;$/;"	m	struct:Netset::Range	typeref:typename:uint32_t
ip_min	common/netset.hpp	/^        uint32_t ip_min;$/;"	m	struct:Netset::Range	typeref:typename:uint32_t
ip_proto	tests/flow_dissector.h	/^    uint8_t  ip_proto;$/;"	m	struct:flow_dissector_key_basic	typeref:typename:uint8_t
ip_str	tests/log_skb_hash_with_key.py	/^def ip_str(be32):$/;"	f
ip_str	tests/log_udp_hash.py	/^def ip_str(be32):$/;"	f
ip_table_	nat/nat.h	/^    MappingTable ip_table_{};$/;"	m	class:Nat	typeref:typename:MappingTable
ip_thread_capacity	nat/nat_config.hpp	/^    uint32_t ip_thread_capacity = 1024;$/;"	m	struct:NatConfig	typeref:typename:uint32_t
ip_to_string	common/netset.cpp	/^std::string Netset::ip_to_string(uint32_t ip) {$/;"	f	class:Netset	typeref:typename:std::string
ip_to_string	include/ipv4.h	/^    static std::string ip_to_string(uint32_t ip) {$/;"	f	struct:IPv4Header	typeref:typename:std::string
ip_to_string	nat/endpoint_base.hpp	/^    static std::string ip_to_string(uint32_t ip_host_order) {$/;"	f	class:EndpointBase	typeref:typename:std::string
ip_to_string	nat/nat.cpp	/^std::string ip_to_string(uint32_t ip_host_order) {$/;"	f	namespace:__anone7d278eb0111	typeref:typename:std::string
ip_tx_fd_	af_packet_io/io_context.hpp	/^    int ip_tx_fd_ = -1;$/;"	m	class:af_packet_io::IoContext	typeref:typename:int
iph	include/ipv4.h	/^    struct iphdr iph;$/;"	m	struct:IPv4Header	typeref:struct:iphdr
is_open	af_packet_io/packet_socket.hpp	/^    bool is_open() const noexcept { return fd_ >= 0; }$/;"	f	class:af_packet_io::PacketSocket	typeref:typename:bool
is_private	nat/nat.cpp	/^bool Nat::is_private(uint32_t ip) const {$/;"	f	class:Nat	typeref:typename:bool
is_public	nat/nat.cpp	/^bool Nat::is_public(uint32_t ip) const {$/;"	f	class:Nat	typeref:typename:bool
is_valid	nat/nat_config.hpp	/^    bool is_valid() const {$/;"	f	struct:NatConfig	typeref:typename:bool
join	common/worker.cpp	/^void Worker::join() {$/;"	f	class:Worker	typeref:typename:void
k0	common/jenkins_hash.hpp	/^    uint64_t k0;$/;"	m	struct:CPUFanoutHash::SipKey	typeref:typename:uint64_t
k1	common/jenkins_hash.hpp	/^    uint64_t k1;$/;"	m	struct:CPUFanoutHash::SipKey	typeref:typename:uint64_t
kernel_hash	tests/test_udp_hash.cpp	/^    uint32_t kernel_hash;$/;"	m	struct:Record	typeref:typename:uint32_t	file:
key	tests/flow_dissector.h	/^            uint32_t key;$/;"	m	struct:flow_dissector_key_addrs::__anon058a5124010a::__anon058a51240408	typeref:typename:uint32_t
key	tests/siphash.h	/^    uint64_t key[2];$/;"	m	struct:__anon547d934d0108	typeref:typename:uint64_t[2]
l4_checksum	af_packet_io/checksum_utils.cpp	/^uint16_t l4_checksum(const iphdr* iph, const uint8_t* payload, size_t len, uint8_t proto) {$/;"	f	namespace:af_packet_io	typeref:typename:uint16_t
length_	af_packet_io/ring_buffer.hpp	/^    size_t length_ = 0;$/;"	m	class:af_packet_io::RingView	typeref:typename:size_t
link_exists	scripts/setup_veth_env.sh	/^link_exists() {$/;"	f
load_csv	tests/test_udp_hash.cpp	/^std::vector<Record> load_csv(const std::string &fname) {$/;"	f	typeref:typename:std::vector<Record>
log	common/logger.h	/^    static void log(uint32_t flag, const char* file, int line, const char* func, Args&&... args)/;"	f	class:Logger	typeref:typename:void
main	apps/af_packet_runner.cpp	/^int main(int argc, char** argv) {$/;"	f	typeref:typename:int
main	build/CMakeFiles/3.28.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^int main(int argc, char* argv[])$/;"	f	typeref:typename:int
main	main.cpp	/^int main() {$/;"	f	typeref:typename:int
main	tests/rxhash.c	/^int main() {$/;"	f	typeref:typename:int
main	tests/test_checksum.cpp	/^int main() {$/;"	f	typeref:typename:int
main	tests/test_fanout.cpp	/^int main(int argc, char** argv) {$/;"	f	typeref:typename:int
main	tests/test_nat.cpp	/^int main() {$/;"	f	typeref:typename:int
main	tests/test_udp_hash.cpp	/^int main() {$/;"	f	typeref:typename:int
main	tests/test_workers.cpp	/^int main() {$/;"	f	typeref:typename:int
main.cpp.i	build/Makefile	/^main.cpp.i:$/;"	t
main.cpp.o	build/Makefile	/^main.cpp.o:$/;"	t
main.cpp.s	build/Makefile	/^main.cpp.s:$/;"	t
main.i	build/Makefile	/^main.i: main.cpp.i$/;"	t
main.o	build/Makefile	/^main.o: main.cpp.o$/;"	t
main.s	build/Makefile	/^main.s: main.cpp.s$/;"	t
maintenance	nat/nat.cpp	/^void Nat::maintenance() {$/;"	f	class:Nat	typeref:typename:void
maintenance	nat/nat.cpp	/^void Nat::maintenance(Clock::time_point) { maintenance(); }$/;"	f	class:Nat	typeref:typename:void
make_base_config	tests/test_nat.cpp	/^NatConfig make_base_config() {$/;"	f	namespace:__anone8b2175a0111	typeref:typename:NatConfig
make_sys_error	af_packet_io/packet_socket.cpp	/^std::system_error make_sys_error(const std::string& what) {$/;"	f	namespace:af_packet_io	typeref:typename:std::system_error
make_tcp_packet	tests/test_workers.cpp	/^std::vector<uint8_t> make_tcp_packet(uint32_t src_ip, uint16_t src_port, uint32_t dst_ip,$/;"	f	namespace:__anon82bf5cc40111	typeref:typename:std::vector<uint8_t>
make_translation	nat/nat.cpp	/^Nat::Translation Nat::make_translation(const MappingEntry& entry) const {$/;"	f	class:Nat	typeref:typename:Nat::Translation
map_icmp	nat/endpoint_base.hpp	/^    std::pair<uint32_t, uint16_t> map_icmp(uint32_t prv_ip, uint32_t dst_ip, uint16_t icmp_id_va/;"	f	class:EndpointBase	typeref:typename:std::pair<uint32_t,uint16_t>
map_ip	nat/nat.cpp	/^uint32_t Nat::map_ip(uint32_t prv_ip, uint32_t dst_ip, uint8_t protocol,$/;"	f	class:Nat	typeref:typename:uint32_t
map_tcp_udp	nat/endpoint_base.hpp	/^    std::pair<uint32_t, uint16_t> map_tcp_udp(uint32_t prv_ip, uint32_t dst_ip, uint16_t src_por/;"	f	class:EndpointBase	typeref:typename:std::pair<uint32_t,uint16_t>
mapped_area	af_packet_io/packet_socket.cpp	/^void* PacketSocket::mapped_area(Direction dir) const noexcept {$/;"	f	class:af_packet_io::PacketSocket	typeref:typename:void *
mapped_length	af_packet_io/packet_socket.cpp	/^size_t PacketSocket::mapped_length(Direction dir) const noexcept {$/;"	f	class:af_packet_io::PacketSocket	typeref:typename:size_t
maybe_static_inbound	nat/nat.cpp	/^std::optional<Nat::Translation> Nat::maybe_static_inbound(uint32_t pub_ip, uint32_t remote_ip,$/;"	f	class:Nat	typeref:typename:std::optional<Nat::Translation>
maybe_static_translation	nat/nat.cpp	/^std::optional<Nat::Translation> Nat::maybe_static_translation(uint32_t prv_ip, uint32_t dst_ip,$/;"	f	class:Nat	typeref:typename:std::optional<Nat::Translation>
mmap_ring	af_packet_io/packet_socket.cpp	/^void PacketSocket::mmap_ring(Direction dir, const RingConfig& cfg) {$/;"	f	class:af_packet_io::PacketSocket	typeref:typename:void
mode	af_packet_io/io_context.hpp	/^    uint16_t mode;  \/\/ PACKET_FANOUT_HASH recommended$/;"	m	struct:af_packet_io::FanoutParams	typeref:typename:uint16_t
mode	af_packet_io/packet_socket.hpp	/^    uint16_t mode = 0;   \/\/ PACKET_FANOUT_* value$/;"	m	struct:af_packet_io::FanoutConfig	typeref:typename:uint16_t
msg	tests/rxhash.c	/^    struct msghdr msg {};$/;"	s	function:main	file:
munmap_ring	af_packet_io/packet_socket.cpp	/^void PacketSocket::munmap_ring(Direction dir) {$/;"	f	class:af_packet_io::PacketSocket	typeref:typename:void
mutex_	common/logger.h	/^    std::mutex mutex_;$/;"	m	class:Logger	typeref:typename:std::mutex
n_proto	tests/flow_dissector.h	/^    uint16_t n_proto;$/;"	m	struct:flow_dissector_key_basic	typeref:typename:uint16_t
name	include/icmp.h	/^    static constexpr const char* name = "ICMP";$/;"	m	struct:ICMPHeader	typeref:typename:const char *
name	include/ipv4.h	/^    static constexpr const char* name = "IP";$/;"	m	struct:IPv4Header	typeref:typename:const char *
name	include/tcp.h	/^    static constexpr const char* name = "TCP";$/;"	m	struct:TCPHeader	typeref:typename:const char *
name	include/udp.h	/^    static constexpr const char* name = "UDP";$/;"	m	struct:UDPHeader	typeref:typename:const char *
namespace_exists	scripts/setup_veth_env.sh	/^namespace_exists() {$/;"	f
nat	common/worker.hpp	/^    NatConfig nat;$/;"	m	struct:WorkerPipelineConfig	typeref:typename:NatConfig
nat	nat/checksum_utils.hpp	/^namespace nat::detail {$/;"	n
nat/nat.cpp.i	build/Makefile	/^nat\/nat.cpp.i:$/;"	t
nat/nat.cpp.o	build/Makefile	/^nat\/nat.cpp.o:$/;"	t
nat/nat.cpp.s	build/Makefile	/^nat\/nat.cpp.s:$/;"	t
nat/nat.i	build/Makefile	/^nat\/nat.i: nat\/nat.cpp.i$/;"	t
nat/nat.o	build/Makefile	/^nat\/nat.o: nat\/nat.cpp.o$/;"	t
nat/nat.s	build/Makefile	/^nat\/nat.s: nat\/nat.cpp.s$/;"	t
nat/nat_icmp.cpp.i	build/Makefile	/^nat\/nat_icmp.cpp.i:$/;"	t
nat/nat_icmp.cpp.o	build/Makefile	/^nat\/nat_icmp.cpp.o:$/;"	t
nat/nat_icmp.cpp.s	build/Makefile	/^nat\/nat_icmp.cpp.s:$/;"	t
nat/nat_icmp.i	build/Makefile	/^nat\/nat_icmp.i: nat\/nat_icmp.cpp.i$/;"	t
nat/nat_icmp.o	build/Makefile	/^nat\/nat_icmp.o: nat\/nat_icmp.cpp.o$/;"	t
nat/nat_icmp.s	build/Makefile	/^nat\/nat_icmp.s: nat\/nat_icmp.cpp.s$/;"	t
nat/nat_ipv4.cpp.i	build/Makefile	/^nat\/nat_ipv4.cpp.i:$/;"	t
nat/nat_ipv4.cpp.o	build/Makefile	/^nat\/nat_ipv4.cpp.o:$/;"	t
nat/nat_ipv4.cpp.s	build/Makefile	/^nat\/nat_ipv4.cpp.s:$/;"	t
nat/nat_ipv4.i	build/Makefile	/^nat\/nat_ipv4.i: nat\/nat_ipv4.cpp.i$/;"	t
nat/nat_ipv4.o	build/Makefile	/^nat\/nat_ipv4.o: nat\/nat_ipv4.cpp.o$/;"	t
nat/nat_ipv4.s	build/Makefile	/^nat\/nat_ipv4.s: nat\/nat_ipv4.cpp.s$/;"	t
nat/nat_tcp.cpp.i	build/Makefile	/^nat\/nat_tcp.cpp.i:$/;"	t
nat/nat_tcp.cpp.o	build/Makefile	/^nat\/nat_tcp.cpp.o:$/;"	t
nat/nat_tcp.cpp.s	build/Makefile	/^nat\/nat_tcp.cpp.s:$/;"	t
nat/nat_tcp.i	build/Makefile	/^nat\/nat_tcp.i: nat\/nat_tcp.cpp.i$/;"	t
nat/nat_tcp.o	build/Makefile	/^nat\/nat_tcp.o: nat\/nat_tcp.cpp.o$/;"	t
nat/nat_tcp.s	build/Makefile	/^nat\/nat_tcp.s: nat\/nat_tcp.cpp.s$/;"	t
nat/nat_udp.cpp.i	build/Makefile	/^nat\/nat_udp.cpp.i:$/;"	t
nat/nat_udp.cpp.o	build/Makefile	/^nat\/nat_udp.cpp.o:$/;"	t
nat/nat_udp.cpp.s	build/Makefile	/^nat\/nat_udp.cpp.s:$/;"	t
nat/nat_udp.i	build/Makefile	/^nat\/nat_udp.i: nat\/nat_udp.cpp.i$/;"	t
nat/nat_udp.o	build/Makefile	/^nat\/nat_udp.o: nat\/nat_udp.cpp.o$/;"	t
nat/nat_udp.s	build/Makefile	/^nat\/nat_udp.s: nat\/nat_udp.cpp.s$/;"	t
nat_	common/worker.hpp	/^    Nat nat_;$/;"	m	class:Worker	typeref:typename:Nat
nat_for_tests	common/worker.hpp	/^    Nat& nat_for_tests() { return nat_; }$/;"	f	class:Worker	typeref:typename:Nat &
nat_table	tests/test_fanout.cpp	/^std::unordered_map<PubKey, uint32_t, PubKeyHash> nat_table;$/;"	v	typeref:typename:std::unordered_map<PubKey,uint32_t,PubKeyHash>
net_offset	common/worker.hpp	/^        size_t net_offset = 0;$/;"	m	struct:Worker::FramePayload	typeref:typename:size_t
net_offset	common/worker.hpp	/^        size_t net_offset = 0;$/;"	m	struct:Worker::TxFrame	typeref:typename:size_t
netset_ip_at	nat/endpoint_base.hpp	/^    static uint32_t netset_ip_at(const Netset& ns, uint32_t idx) {$/;"	f	class:EndpointBase	typeref:typename:uint32_t
next	common/netset.hpp	/^        std::shared_ptr<Range> next;$/;"	m	struct:Netset::Range	typeref:typename:std::shared_ptr<Range>
ofs_	common/logger.h	/^    std::ofstream ofs_;$/;"	m	class:Logger	typeref:typename:std::ofstream
ones_complement_add	nat/checksum_utils.hpp	/^inline uint32_t ones_complement_add(uint32_t sum) {$/;"	f	namespace:nat::detail	typeref:typename:uint32_t
open	af_packet_io/packet_socket.cpp	/^void PacketSocket::open(int protocol) {$/;"	f	class:af_packet_io::PacketSocket	typeref:typename:void
operator ()	committer/committer.h	/^    bool operator()(const Header*, uint8_t*, size_t, size_t&, const IPv4Header* = nullptr) const/;"	f	struct:Committer	typeref:typename:bool
operator ()	committer/committer_icmp.cpp	/^bool Committer<ICMPHeader>::operator()(const ICMPHeader* hdr, uint8_t* data, size_t len,$/;"	f	class:Committer	typeref:typename:bool
operator ()	committer/committer_ipv4.cpp	/^bool Committer<IPv4Header>::operator()(const IPv4Header* hdr, uint8_t* data, size_t len,$/;"	f	class:Committer	typeref:typename:bool
operator ()	committer/committer_tcp.cpp	/^bool Committer<TCPHeader>::operator()(const TCPHeader* hdr, uint8_t* data, size_t len,$/;"	f	class:Committer	typeref:typename:bool
operator ()	committer/committer_udp.cpp	/^bool Committer<UDPHeader>::operator()(const UDPHeader* hdr, uint8_t* data, size_t len,$/;"	f	class:Committer	typeref:typename:bool
operator ()	filters/filter.h	/^struct Filter { bool operator()(const Header&) { return true; } };$/;"	f	struct:Filter	typeref:typename:bool
operator ()	filters/filter_icmp.cpp	/^    bool operator()(const ICMPHeader& icmp) { return true; }$/;"	f	struct:Filter	typeref:typename:bool	file:
operator ()	filters/filter_ipv4.cpp	/^    bool operator()(const IPv4Header& ip) {$/;"	f	struct:Filter	typeref:typename:bool	file:
operator ()	filters/filter_tcp.cpp	/^    bool operator()(const TCPHeader& tcp) { return true; }$/;"	f	struct:Filter	typeref:typename:bool	file:
operator ()	filters/filter_udp.cpp	/^    bool operator()(const UDPHeader&) { return true; }$/;"	f	struct:Filter	typeref:typename:bool	file:
operator ()	nat/nat.cpp	/^size_t Nat::FlowKeyHash::operator()(const FlowKey& key) const noexcept {$/;"	f	class:Nat::FlowKeyHash	typeref:typename:size_t
operator ()	nat/nat.cpp	/^size_t Nat::PrivateKeyHash::operator()(const PrivateKey& key) const noexcept {$/;"	f	class:Nat::PrivateKeyHash	typeref:typename:size_t
operator ()	nat/nat.cpp	/^size_t Nat::PubKeyHash::operator()(const PubKey& key) const noexcept {$/;"	f	class:Nat::PubKeyHash	typeref:typename:size_t
operator ()	nat/nat.cpp	/^size_t Nat::PubOnlyKeyHash::operator()(const PubOnlyKey& key) const noexcept {$/;"	f	class:Nat::PubOnlyKeyHash	typeref:typename:size_t
operator ()	nat/nat.h	/^    size_t operator()(const Nat::FlowKey& key) const noexcept {$/;"	f	struct:std::hash	typeref:typename:size_t
operator ()	nat/nat.h	/^    size_t operator()(const Nat::PubKey& key) const noexcept {$/;"	f	struct:std::hash	typeref:typename:size_t
operator ()	parsers/parser.h	/^    bool operator()(Header* hdr, const uint8_t* data, size_t len,$/;"	f	struct:Parser	typeref:typename:bool
operator ()	parsers/parser_icmp.cpp	/^bool Parser<ICMPHeader>::operator()(ICMPHeader* hdr, const uint8_t* data, size_t len,$/;"	f	class:Parser	typeref:typename:bool
operator ()	parsers/parser_ipv4.cpp	/^bool Parser<IPv4Header>::operator()(IPv4Header* hdr, const uint8_t* data, size_t len,$/;"	f	class:Parser	typeref:typename:bool
operator ()	parsers/parser_tcp.cpp	/^bool Parser<TCPHeader>::operator()(TCPHeader* hdr, const uint8_t* data, size_t len, size_t& offs/;"	f	class:Parser	typeref:typename:bool
operator ()	parsers/parser_udp.cpp	/^bool Parser<UDPHeader>::operator()(UDPHeader* hdr, const uint8_t* data, size_t len, size_t& offs/;"	f	class:Parser	typeref:typename:bool
operator ()	tests/test_fanout.cpp	/^    std::size_t operator()(const PubKey& k) const noexcept {$/;"	f	struct:PubKeyHash	typeref:typename:std::size_t	file:
operator =	af_packet_io/packet_socket.cpp	/^PacketSocket& PacketSocket::operator=(PacketSocket&& other) noexcept {$/;"	f	class:af_packet_io::PacketSocket	typeref:typename:PacketSocket &
operator ==	nat/nat.cpp	/^bool Nat::FlowKey::operator==(const FlowKey& other) const noexcept {$/;"	f	class:Nat::FlowKey	typeref:typename:bool
operator ==	nat/nat.cpp	/^bool Nat::PrivateKey::operator==(const PrivateKey& other) const noexcept {$/;"	f	class:Nat::PrivateKey	typeref:typename:bool
operator ==	nat/nat.cpp	/^bool Nat::PubKey::operator==(const PubKey& other) const noexcept {$/;"	f	class:Nat::PubKey	typeref:typename:bool
operator ==	nat/nat.cpp	/^bool Nat::PubOnlyKey::operator==(const PubOnlyKey& other) const noexcept {$/;"	f	class:Nat::PubOnlyKey	typeref:typename:bool
operator ==	tests/test_fanout.cpp	/^    bool operator==(const PubKey& other) const {$/;"	f	struct:PubKey	typeref:typename:bool	file:
order	nat/nat.h	/^        std::list<FlowKey> order;$/;"	m	struct:Nat::MappingTable	typeref:typename:std::list<FlowKey>
order_it	nat/nat.h	/^        std::list<FlowKey>::iterator order_it;$/;"	m	struct:Nat::MappingEntry	typeref:typename:std::list<FlowKey>::iterator
origin	common/worker.hpp	/^        enum class Origin { Private, Public } origin = Origin::Private;$/;"	m	struct:Worker::FramePayload	typeref:enum:Worker::FramePayload::Origin
output	build/compile_commands.json	/^  "output": "CMakeFiles\/PacketProcessor.dir\/filters\/filter_icmp.cpp.o"$/;"	s	object:0
output	build/compile_commands.json	/^  "output": "CMakeFiles\/PacketProcessor.dir\/filters\/filter_ipv4.cpp.o"$/;"	s	object:1
output	build/compile_commands.json	/^  "output": "CMakeFiles\/PacketProcessor.dir\/filters\/filter_tcp.cpp.o"$/;"	s	object:2
output	build/compile_commands.json	/^  "output": "CMakeFiles\/PacketProcessor.dir\/filters\/filter_udp.cpp.o"$/;"	s	object:3
output	build/compile_commands.json	/^  "output": "CMakeFiles\/PacketProcessor.dir\/main.cpp.o"$/;"	s	object:4
output	build/compile_commands.json	/^  "output": "CMakeFiles\/PacketProcessor.dir\/nat\/nat_icmp.cpp.o"$/;"	s	object:5
output	build/compile_commands.json	/^  "output": "CMakeFiles\/PacketProcessor.dir\/nat\/nat_ipv4.cpp.o"$/;"	s	object:6
output	build/compile_commands.json	/^  "output": "CMakeFiles\/PacketProcessor.dir\/nat\/nat_tcp.cpp.o"$/;"	s	object:7
output	build/compile_commands.json	/^  "output": "CMakeFiles\/PacketProcessor.dir\/nat\/nat_udp.cpp.o"$/;"	s	object:8
output	build/compile_commands.json	/^  "output": "CMakeFiles\/PacketProcessor.dir\/parsers\/parser_icmp.cpp.o"$/;"	s	object:9
output	build/compile_commands.json	/^  "output": "CMakeFiles\/PacketProcessor.dir\/parsers\/parser_ipv4.cpp.o"$/;"	s	object:10
output	build/compile_commands.json	/^  "output": "CMakeFiles\/PacketProcessor.dir\/parsers\/parser_tcp.cpp.o"$/;"	s	object:11
output	build/compile_commands.json	/^  "output": "CMakeFiles\/PacketProcessor.dir\/parsers\/parser_udp.cpp.o"$/;"	s	object:12
owner_thread	nat/nat.h	/^        uint32_t owner_thread = 0;$/;"	m	struct:Nat::MappingEntry	typeref:typename:uint32_t
owner_thread	nat/nat.h	/^        uint32_t owner_thread = 0;$/;"	m	struct:Nat::Translation	typeref:typename:uint32_t
pack32	nat/nat.cpp	/^constexpr uint64_t pack32(uint32_t hi, uint32_t lo) noexcept {$/;"	f	namespace:__anone7d278eb0111	typeref:typename:uint64_t
padding	tests/flow_dissector.h	/^    uint8_t  padding;$/;"	m	struct:flow_dissector_key_basic	typeref:typename:uint8_t
parse	chain/header_chain.h	/^    bool parse(const uint8_t* data, size_t len) {$/;"	f	class:HeaderChainTuple	typeref:typename:bool
parse_ip	apps/af_packet_runner.cpp	/^uint32_t parse_ip(const std::string& ip) {$/;"	f	namespace:__anon014c6b900111	typeref:typename:uint32_t
parse_ip	common/netset.cpp	/^uint32_t Netset::parse_ip(const std::string& ip_str) {$/;"	f	class:Netset	typeref:typename:uint32_t
parse_ip32	tests/test_workers.cpp	/^uint32_t parse_ip32(const char* ip) {$/;"	f	namespace:__anon82bf5cc40111	typeref:typename:uint32_t
parse_one	chain/header_chain.h	/^    bool parse_one(const uint8_t* data, size_t len, size_t& offset,$/;"	f	class:HeaderChainTuple	typeref:typename:bool
parse_packet	chain/header_chain.h	/^    bool parse_packet(const uint8_t* data, size_t len, size_t& offset) {$/;"	f	class:HeaderChainTuple	typeref:typename:bool
parse_port	apps/af_packet_runner.cpp	/^uint16_t parse_port(const std::string& port) {$/;"	f	namespace:__anon014c6b900111	typeref:typename:uint16_t
parsers/parser_icmp.cpp.i	build/Makefile	/^parsers\/parser_icmp.cpp.i:$/;"	t
parsers/parser_icmp.cpp.o	build/Makefile	/^parsers\/parser_icmp.cpp.o:$/;"	t
parsers/parser_icmp.cpp.s	build/Makefile	/^parsers\/parser_icmp.cpp.s:$/;"	t
parsers/parser_icmp.i	build/Makefile	/^parsers\/parser_icmp.i: parsers\/parser_icmp.cpp.i$/;"	t
parsers/parser_icmp.o	build/Makefile	/^parsers\/parser_icmp.o: parsers\/parser_icmp.cpp.o$/;"	t
parsers/parser_icmp.s	build/Makefile	/^parsers\/parser_icmp.s: parsers\/parser_icmp.cpp.s$/;"	t
parsers/parser_ipv4.cpp.i	build/Makefile	/^parsers\/parser_ipv4.cpp.i:$/;"	t
parsers/parser_ipv4.cpp.o	build/Makefile	/^parsers\/parser_ipv4.cpp.o:$/;"	t
parsers/parser_ipv4.cpp.s	build/Makefile	/^parsers\/parser_ipv4.cpp.s:$/;"	t
parsers/parser_ipv4.i	build/Makefile	/^parsers\/parser_ipv4.i: parsers\/parser_ipv4.cpp.i$/;"	t
parsers/parser_ipv4.o	build/Makefile	/^parsers\/parser_ipv4.o: parsers\/parser_ipv4.cpp.o$/;"	t
parsers/parser_ipv4.s	build/Makefile	/^parsers\/parser_ipv4.s: parsers\/parser_ipv4.cpp.s$/;"	t
parsers/parser_tcp.cpp.i	build/Makefile	/^parsers\/parser_tcp.cpp.i:$/;"	t
parsers/parser_tcp.cpp.o	build/Makefile	/^parsers\/parser_tcp.cpp.o:$/;"	t
parsers/parser_tcp.cpp.s	build/Makefile	/^parsers\/parser_tcp.cpp.s:$/;"	t
parsers/parser_tcp.i	build/Makefile	/^parsers\/parser_tcp.i: parsers\/parser_tcp.cpp.i$/;"	t
parsers/parser_tcp.o	build/Makefile	/^parsers\/parser_tcp.o: parsers\/parser_tcp.cpp.o$/;"	t
parsers/parser_tcp.s	build/Makefile	/^parsers\/parser_tcp.s: parsers\/parser_tcp.cpp.s$/;"	t
parsers/parser_udp.cpp.i	build/Makefile	/^parsers\/parser_udp.cpp.i:$/;"	t
parsers/parser_udp.cpp.o	build/Makefile	/^parsers\/parser_udp.cpp.o:$/;"	t
parsers/parser_udp.cpp.s	build/Makefile	/^parsers\/parser_udp.cpp.s:$/;"	t
parsers/parser_udp.i	build/Makefile	/^parsers\/parser_udp.i: parsers\/parser_udp.cpp.i$/;"	t
parsers/parser_udp.o	build/Makefile	/^parsers\/parser_udp.o: parsers\/parser_udp.cpp.o$/;"	t
parsers/parser_udp.s	build/Makefile	/^parsers\/parser_udp.s: parsers\/parser_udp.cpp.s$/;"	t
pick_cpu	nat/endpoint_base.hpp	/^    inline uint32_t pick_cpu(uint32_t hash) const {$/;"	f	class:EndpointBase	typeref:typename:uint32_t
pick_slot	tests/test_fanout.cpp	/^    uint32_t pick_slot(const std::tuple<uint32_t,uint32_t,uint16_t,uint16_t,uint8_t>& tuple) con/;"	f	class:TestEndpoint	typeref:typename:uint32_t	file:
pin_to_cpu	tests/test_fanout.cpp	/^void pin_to_cpu(int cpu) {$/;"	f	typeref:typename:void
port	tests/test_fanout.cpp	/^    uint16_t port;$/;"	m	struct:PubKey	typeref:typename:uint16_t	file:
port_num	tests/log_skb_hash_with_key.py	/^def port_num(be16):$/;"	f
port_num	tests/log_udp_hash.py	/^def port_num(be16):$/;"	f
ports	tests/flow_dissector.h	/^    struct flow_dissector_key_ports   ports;$/;"	m	struct:flow_keys	typeref:struct:flow_dissector_key_ports
ports_per_private	nat/endpoint_base.hpp	/^    uint32_t ports_per_private(uint16_t port_min, uint16_t port_max) const {$/;"	f	class:EndpointBase	typeref:typename:uint32_t
preinstall	build/Makefile	/^preinstall: all$/;"	t
preinstall/fast	build/Makefile	/^preinstall\/fast:$/;"	t
pretty	common/netset.cpp	/^std::string Netset::pretty() const {$/;"	f	class:Netset	typeref:typename:std::string
print_event	tests/log_skb_hash_with_key.py	/^def print_event(cpu, data, size):$/;"	f
print_event	tests/log_udp_hash.py	/^def print_event(cpu, data, size):$/;"	f
priv_ctx_	common/worker.hpp	/^    InterfaceContext priv_ctx_;$/;"	m	class:Worker	typeref:typename:InterfaceContext
private_ip_count	nat/nat_config.hpp	/^    uint32_t private_ip_count() const {$/;"	f	struct:NatConfig	typeref:typename:uint32_t
private_netset	nat/nat_config.hpp	/^    std::shared_ptr<Netset> private_netset;$/;"	m	struct:NatConfig	typeref:typename:std::shared_ptr<Netset>
process	nat/nat_icmp.cpp	/^void Nat::process(ICMPHeader& icmp) {$/;"	f	class:Nat	typeref:typename:void
process	nat/nat_icmp.cpp	/^void Nat::process(ICMPHeader& icmp, Clock::time_point) {$/;"	f	class:Nat	typeref:typename:void
process	nat/nat_ipv4.cpp	/^void Nat::process(IPv4Header& ip) {$/;"	f	class:Nat	typeref:typename:void
process	nat/nat_ipv4.cpp	/^void Nat::process(IPv4Header& ip, Clock::time_point) {$/;"	f	class:Nat	typeref:typename:void
process	nat/nat_tcp.cpp	/^void Nat::process(TCPHeader& tcp) {$/;"	f	class:Nat	typeref:typename:void
process	nat/nat_tcp.cpp	/^void Nat::process(TCPHeader& tcp, Clock::time_point) {$/;"	f	class:Nat	typeref:typename:void
process	nat/nat_udp.cpp	/^void Nat::process(UDPHeader& udp) {$/;"	f	class:Nat	typeref:typename:void
process	nat/nat_udp.cpp	/^void Nat::process(UDPHeader& udp, Clock::time_point) {$/;"	f	class:Nat	typeref:typename:void
processQueue	common/logger.h	/^    void processQueue() {$/;"	f	class:Logger	typeref:typename:void
process_frame_for_tests	common/worker.hpp	/^    void process_frame_for_tests(std::vector<uint8_t>& frame,$/;"	f	class:Worker	typeref:typename:void
process_interface	common/worker.cpp	/^void Worker::process_interface(InterfaceContext& src_ctx, af_packet_io::RingView& view,$/;"	f	class:Worker	typeref:typename:void
process_remote_frames	common/worker.cpp	/^void Worker::process_remote_frames() {$/;"	f	class:Worker	typeref:typename:void
process_remote_frames_for_tests	common/worker.hpp	/^    void process_remote_frames_for_tests() { process_remote_frames(); }$/;"	f	class:Worker	typeref:typename:void
process_rx_block	common/worker.cpp	/^void Worker::process_rx_block(InterfaceContext& src_ctx, FramePayload::Origin origin,$/;"	f	class:Worker	typeref:typename:void
prog	tests/log_skb_hash_with_key.py	/^prog = r"""$/;"	v
prog	tests/log_udp_hash.py	/^prog = r"""$/;"	v
proto	tests/test_udp_hash.cpp	/^    uint8_t  proto;$/;"	m	struct:Record	typeref:typename:uint8_t	file:
proto_ip_only	nat/nat.cpp	/^constexpr uint8_t proto_ip_only = 0; \/\/ используется для IP NAT без порт/;"	v	namespace:__anone7d278eb0111	typeref:typename:uint8_t
protocol	af_packet_io/io_context.hpp	/^    uint16_t protocol =  ETH_P_ALL;$/;"	m	struct:af_packet_io::IoConfig	typeref:typename:uint16_t
protocol	include/icmp.h	/^        uint8_t  protocol;$/;"	m	struct:ICMPHeader::Flow	typeref:typename:uint8_t
protocol	include/ipv4.h	/^        uint8_t protocol;$/;"	m	struct:IPv4Header::Flow	typeref:typename:uint8_t
protocol	include/tcp.h	/^        uint8_t  protocol;$/;"	m	struct:TCPHeader::Flow	typeref:typename:uint8_t
protocol	include/udp.h	/^        uint8_t  protocol;$/;"	m	struct:UDPHeader::Flow	typeref:typename:uint8_t
protocol	nat/nat.h	/^        uint8_t protocol = 0;$/;"	m	struct:Nat::FlowKey	typeref:typename:uint8_t
protocol	nat/nat.h	/^        uint8_t protocol = 0;$/;"	m	struct:Nat::PrivateKey	typeref:typename:uint8_t
protocol	nat/nat.h	/^        uint8_t protocol = 0;$/;"	m	struct:Nat::PubKey	typeref:typename:uint8_t
protocol	nat/nat.h	/^        uint8_t protocol = 0;$/;"	m	struct:Nat::PubOnlyKey	typeref:typename:uint8_t
prv_ip	nat/nat.h	/^        uint32_t prv_ip = 0;$/;"	m	struct:Nat::FlowKey	typeref:typename:uint32_t
prv_ip	nat/nat.h	/^        uint32_t prv_ip = 0;$/;"	m	struct:Nat::PrivateKey	typeref:typename:uint32_t
pub	nat/nat.h	/^        PubKey pub;$/;"	m	struct:Nat::MappingEntry	typeref:typename:PubKey
pub	nat/nat.h	/^        PubKey pub;$/;"	m	struct:Nat::Translation	typeref:typename:PubKey
pub_ctx_	common/worker.hpp	/^    InterfaceContext pub_ctx_;$/;"	m	class:Worker	typeref:typename:InterfaceContext
pub_ip	nat/nat.h	/^        uint32_t pub_ip = 0;$/;"	m	struct:Nat::PubKey	typeref:typename:uint32_t
pub_ip	nat/nat.h	/^        uint32_t pub_ip = 0;$/;"	m	struct:Nat::PubOnlyKey	typeref:typename:uint32_t
pub_port	nat/nat.h	/^        uint16_t pub_port = 0;$/;"	m	struct:Nat::PubKey	typeref:typename:uint16_t
pub_port	nat/nat.h	/^        uint16_t pub_port = 0;$/;"	m	struct:Nat::PubOnlyKey	typeref:typename:uint16_t
public_ip_count	nat/nat_config.hpp	/^    uint32_t public_ip_count() const {$/;"	f	struct:NatConfig	typeref:typename:uint32_t
public_netset	nat/nat_config.hpp	/^    std::shared_ptr<Netset> public_netset;$/;"	m	struct:NatConfig	typeref:typename:std::shared_ptr<Netset>
qnxnto	build/CMakeFiles/3.28.3/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* qnxnto = "INFO" ":" "qnxnto[]";$/;"	v	typeref:typename:char const *
queue_	common/logger.h	/^    std::queue<std::pair<uint32_t,std::string>> queue_;$/;"	m	class:Logger	typeref:typename:std::queue<std::pair<uint32_t,std::string>>
raw_checksum	af_packet_io/checksum_utils.cpp	/^uint16_t raw_checksum(const uint8_t* data, size_t len) {$/;"	f	namespace:af_packet_io::__anon7613369d0111	typeref:typename:uint16_t
ready_	nat/nat.h	/^    bool ready_ = false;$/;"	m	class:Nat	typeref:typename:bool
reason	common/worker.hpp	/^        const char* reason = "direct";$/;"	m	struct:Worker::TxFrame	typeref:typename:const char *
rebuild_cache	build/Makefile	/^rebuild_cache:$/;"	t
rebuild_cache/fast	build/Makefile	/^rebuild_cache\/fast: rebuild_cache$/;"	t
recompute_ipv4_checksum	nat/checksum_utils.hpp	/^inline uint16_t recompute_ipv4_checksum(const iphdr& ip_hdr) {$/;"	f	namespace:nat::detail	typeref:typename:uint16_t
remote_mutex_	common/worker.hpp	/^    std::mutex remote_mutex_;$/;"	m	class:Worker	typeref:typename:std::mutex
remote_queue_	common/worker.hpp	/^    std::deque<FramePayload> remote_queue_;$/;"	m	class:Worker	typeref:typename:std::deque<FramePayload>
require_root	scripts/setup_veth_env.sh	/^require_root() {$/;"	f
reverse	nat/nat.h	/^        std::unordered_map<PubKey, FlowKey, PubKeyHash> reverse;$/;"	m	struct:Nat::MappingTable	typeref:typename:std::unordered_map<PubKey,FlowKey,PubKeyHash>
run	common/worker.cpp	/^void Worker::run() {$/;"	f	class:Worker	typeref:typename:void
run_test_ping	scripts/setup_veth_env.sh	/^run_test_ping() {$/;"	f
running_	common/logger.h	/^    std::atomic<bool> running_;$/;"	m	class:Logger	typeref:typename:std::atomic<bool>
running_	common/worker.hpp	/^    std::atomic<bool> running_{false};$/;"	m	class:Worker	typeref:typename:std::atomic<bool>
rx_interface	af_packet_io/io_context.hpp	/^    std::string rx_interface;$/;"	m	struct:af_packet_io::IoConfig	typeref:typename:std::string
rx_map_	af_packet_io/packet_socket.hpp	/^    void* rx_map_ = nullptr;$/;"	m	class:af_packet_io::PacketSocket	typeref:typename:void *
rx_map_len_	af_packet_io/packet_socket.hpp	/^    size_t rx_map_len_ = 0;$/;"	m	class:af_packet_io::PacketSocket	typeref:typename:size_t
rx_ring	af_packet_io/io_context.cpp	/^RingView IoContext::rx_ring() const noexcept {$/;"	f	class:af_packet_io::IoContext	typeref:typename:RingView
rx_ring	af_packet_io/io_context.hpp	/^    RingConfig rx_ring{};$/;"	m	struct:af_packet_io::IoConfig	typeref:typename:RingConfig
sa	tests/test_udp_hash.cpp	/^            struct in_addr sa{r.saddr_be}, da{r.daddr_be};$/;"	s	function:main	file:
saddr_be	tests/test_udp_hash.cpp	/^    uint32_t saddr_be;$/;"	m	struct:Record	typeref:typename:uint32_t	file:
select_cpu	common/jenkins_hash.hpp	/^inline uint32_t select_cpu(uint32_t hash, uint32_t num) {$/;"	f	namespace:CPUFanoutHash	typeref:typename:uint32_t
select_public_ip	nat/endpoint_base.hpp	/^    uint32_t select_public_ip(uint32_t hash) const {$/;"	f	class:EndpointBase	typeref:typename:uint32_t
send_frame	af_packet_io/io_context.cpp	/^bool IoContext::send_frame(const uint8_t* data, size_t length, size_t net_offset,$/;"	f	class:af_packet_io::IoContext	typeref:typename:bool
seq	include/icmp.h	/^        uint16_t seq;$/;"	m	struct:ICMPHeader::Flow	typeref:typename:uint16_t
setFlags	common/logger.h	/^    static void setFlags(uint32_t flags) {$/;"	f	class:Logger	typeref:typename:void
setOutputFile	common/logger.h	/^    static void setOutputFile(const std::string& filename) {$/;"	f	class:Logger	typeref:typename:void
set_forward_callback	common/worker.hpp	/^    void set_forward_callback(std::function<void(uint32_t, FramePayload&&)> fn) {$/;"	f	class:Worker	typeref:typename:void
set_siphash_key	common/jenkins_hash.hpp	/^inline void set_siphash_key(uint64_t k0, uint64_t k1) {$/;"	f	namespace:CPUFanoutHash	typeref:typename:void
set_siphash_key_bytes	common/jenkins_hash.hpp	/^inline void set_siphash_key_bytes(const unsigned char key16[16]) {$/;"	f	namespace:CPUFanoutHash	typeref:typename:void
set_tpacket_version	af_packet_io/packet_socket.cpp	/^void PacketSocket::set_tpacket_version(int version) {$/;"	f	class:af_packet_io::PacketSocket	typeref:typename:void
setup_icmp	tests/test_nat.cpp	/^void setup_icmp(ICMPHeader& icmp, IPv4Header& ip, uint16_t ident, uint16_t seq, uint16_t checksu/;"	f	namespace:__anone8b2175a0111	typeref:typename:void
setup_ipv4	tests/test_nat.cpp	/^void setup_ipv4(IPv4Header& ip, uint32_t src_host, uint32_t dst_host, uint8_t proto,$/;"	f	namespace:__anone8b2175a0111	typeref:typename:void
setup_tcp	tests/test_nat.cpp	/^void setup_tcp(TCPHeader& tcp, IPv4Header& ip, uint16_t src_port, uint16_t dst_port,$/;"	f	namespace:__anone8b2175a0111	typeref:typename:void
setup_udp	tests/test_nat.cpp	/^void setup_udp(UDPHeader& udp, IPv4Header& ip, uint16_t src_port, uint16_t dst_port,$/;"	f	namespace:__anone8b2175a0111	typeref:typename:void
shutdown	common/logger.h	/^    static void shutdown() {$/;"	f	class:Logger	typeref:typename:void
signal_handler	apps/af_packet_runner.cpp	/^void signal_handler(int) { g_stop.store(true); }$/;"	f	namespace:__anon014c6b900111	typeref:typename:void
siphash	tests/siphash.c	/^uint64_t siphash(const void *data, size_t len, const siphash_key_t *key)$/;"	f	typeref:typename:uint64_t
siphash24_kernel_compat	common/jenkins_hash.hpp	/^inline uint64_t siphash24_kernel_compat(const void* data_void, size_t len, const SipKey& k)$/;"	f	namespace:CPUFanoutHash	typeref:typename:uint64_t
siphash_key	common/jenkins_hash.hpp	/^inline SipKey& siphash_key() {$/;"	f	namespace:CPUFanoutHash	typeref:typename:SipKey &
siphash_key_t	tests/siphash.h	/^} siphash_key_t;$/;"	t	typeref:struct:__anon547d934d0108
size	common/netset.cpp	/^uint32_t Netset::size() const {$/;"	f	class:Netset	typeref:typename:uint32_t
sll	tests/test_fanout.cpp	/^    struct sockaddr_ll sll {};$/;"	s	function:worker_thread	file:
sock_	af_packet_io/io_context.hpp	/^    PacketSocket sock_;$/;"	m	class:af_packet_io::IoContext	typeref:typename:PacketSocket
socket	af_packet_io/io_context.hpp	/^    PacketSocket& socket() noexcept { return sock_; }$/;"	f	class:af_packet_io::IoContext	typeref:typename:PacketSocket &
socket	af_packet_io/io_context.hpp	/^    const PacketSocket& socket() const noexcept { return sock_; }$/;"	f	class:af_packet_io::IoContext	typeref:typename:const PacketSocket &
sport_be	tests/test_udp_hash.cpp	/^    uint16_t sport_be;$/;"	m	struct:Record	typeref:typename:uint16_t	file:
src	include/ethernet.h	/^struct EthernetHeader { uint8_t dst[6]; uint8_t src[6]; uint16_t ethertype; };$/;"	m	struct:EthernetHeader	typeref:typename:uint8_t[6]
src	tests/flow_dissector.h	/^            struct in6_addr src;$/;"	m	struct:flow_dissector_key_addrs::__anon058a5124010a::__anon058a51240308	typeref:struct:in6_addr
src	tests/flow_dissector.h	/^            uint32_t src;$/;"	m	struct:flow_dissector_key_addrs::__anon058a5124010a::__anon058a51240208	typeref:typename:uint32_t
src	tests/flow_dissector.h	/^    uint16_t src;$/;"	m	struct:flow_dissector_key_ports	typeref:typename:uint16_t
src_ip	include/icmp.h	/^        uint32_t src_ip;$/;"	m	struct:ICMPHeader::Flow	typeref:typename:uint32_t
src_ip	include/ipv4.h	/^        uint32_t src_ip;$/;"	m	struct:IPv4Header::Flow	typeref:typename:uint32_t
src_ip	include/tcp.h	/^        uint32_t src_ip;$/;"	m	struct:TCPHeader::Flow	typeref:typename:uint32_t
src_ip	include/udp.h	/^        uint32_t src_ip;$/;"	m	struct:UDPHeader::Flow	typeref:typename:uint32_t
src_port	include/tcp.h	/^        uint16_t src_port;$/;"	m	struct:TCPHeader::Flow	typeref:typename:uint16_t
src_port	include/udp.h	/^        uint16_t src_port;$/;"	m	struct:UDPHeader::Flow	typeref:typename:uint16_t
src_port	nat/nat.h	/^        uint16_t src_port = 0;$/;"	m	struct:Nat::FlowKey	typeref:typename:uint16_t
src_port	nat/nat.h	/^        uint16_t src_port = 0;$/;"	m	struct:Nat::PrivateKey	typeref:typename:uint16_t
start	common/worker.cpp	/^void Worker::start() {$/;"	f	class:Worker	typeref:typename:void
static_forward_	nat/nat.h	/^    std::unordered_map<PrivateKey, PubOnlyKey, PrivateKeyHash> static_forward_;$/;"	m	class:Nat	typeref:typename:std::unordered_map<PrivateKey,PubOnlyKey,PrivateKeyHash>
static_icmp	common/worker.hpp	/^    std::vector<std::tuple<uint32_t, uint16_t, uint32_t, uint16_t>> static_icmp;$/;"	m	struct:WorkerPipelineConfig	typeref:typename:std::vector<std::tuple<uint32_t,uint16_t,uint32_t,uint16_t>>
static_ip	common/worker.hpp	/^    std::vector<std::pair<uint32_t, uint32_t>> static_ip;$/;"	m	struct:WorkerPipelineConfig	typeref:typename:std::vector<std::pair<uint32_t,uint32_t>>
static_reverse_	nat/nat.h	/^    std::unordered_map<PubOnlyKey, PrivateKey, PubOnlyKeyHash> static_reverse_;$/;"	m	class:Nat	typeref:typename:std::unordered_map<PubOnlyKey,PrivateKey,PubOnlyKeyHash>
static_tcp	common/worker.hpp	/^    std::vector<std::tuple<uint32_t, uint16_t, uint32_t, uint16_t>> static_tcp;$/;"	m	struct:WorkerPipelineConfig	typeref:typename:std::vector<std::tuple<uint32_t,uint16_t,uint32_t,uint16_t>>
static_udp	common/worker.hpp	/^    std::vector<std::tuple<uint32_t, uint16_t, uint32_t, uint16_t>> static_udp;$/;"	m	struct:WorkerPipelineConfig	typeref:typename:std::vector<std::tuple<uint32_t,uint16_t,uint32_t,uint16_t>>
std	nat/nat.h	/^namespace std {$/;"	n
stop	common/worker.cpp	/^void Worker::stop() {$/;"	f	class:Worker	typeref:typename:void
submit_remote_frame	common/worker.cpp	/^void Worker::submit_remote_frame(FramePayload&& frame) {$/;"	f	class:Worker	typeref:typename:void
supports_id_translation	nat/nat_icmp.cpp	/^bool supports_id_translation(const icmphdr& hdr) {$/;"	f	namespace:__anon97f778730111	typeref:typename:bool
sweetspot_cpp	CMakeLists.txt	/^project(sweetspot_cpp LANGUAGES CXX)$/;"	p
table_mtx	tests/test_fanout.cpp	/^std::mutex table_mtx;$/;"	v	typeref:typename:std::mutex
tcp_port_max	nat/nat_config.hpp	/^    uint16_t tcp_port_max = 20000;$/;"	m	struct:NatConfig	typeref:typename:uint16_t
tcp_port_min	nat/nat_config.hpp	/^    uint16_t tcp_port_min = 10000;$/;"	m	struct:NatConfig	typeref:typename:uint16_t
tcp_table_	nat/nat.h	/^    MappingTable tcp_table_{};$/;"	m	class:Nat	typeref:typename:MappingTable
tcp_thread_capacity	nat/nat_config.hpp	/^    uint32_t tcp_thread_capacity = 2048;$/;"	m	struct:NatConfig	typeref:typename:uint32_t
tcph	include/tcp.h	/^    struct tcphdr tcph;$/;"	m	struct:TCPHeader	typeref:struct:tcphdr
tear_down_environment	scripts/setup_veth_env.sh	/^tear_down_environment() {$/;"	f
test	build/Makefile	/^test:$/;"	t
test/fast	build/Makefile	/^test\/fast: test$/;"	t
test_capacity_eviction	tests/test_nat.cpp	/^void test_capacity_eviction(const NatConfig& base_cfg) {$/;"	f	namespace:__anone8b2175a0111	typeref:typename:void
test_checksum	CMakeLists.txt	/^add_executable(test_checksum$/;"	t
test_checksum	build/Makefile	/^test_checksum: cmake_check_build_system$/;"	t
test_checksum/fast	build/Makefile	/^test_checksum\/fast:$/;"	t
test_dynamic_ip_translation	tests/test_nat.cpp	/^void test_dynamic_ip_translation(const NatConfig& cfg) {$/;"	f	namespace:__anone8b2175a0111	typeref:typename:void
test_fanout	CMakeLists.txt	/^add_executable(test_fanout ${TEST_SRC})$/;"	t
test_fanout	build/Makefile	/^test_fanout: cmake_check_build_system$/;"	t
test_fanout/fast	build/Makefile	/^test_fanout\/fast:$/;"	t
test_icmp_translation	tests/test_nat.cpp	/^void test_icmp_translation(const NatConfig& cfg) {$/;"	f	namespace:__anone8b2175a0111	typeref:typename:void
test_non_private_source_untouched	tests/test_nat.cpp	/^void test_non_private_source_untouched(const NatConfig& cfg) {$/;"	f	namespace:__anone8b2175a0111	typeref:typename:void
test_static_ip	tests/test_nat.cpp	/^void test_static_ip(const NatConfig& cfg) {$/;"	f	namespace:__anone8b2175a0111	typeref:typename:void
test_static_tcp	tests/test_nat.cpp	/^void test_static_tcp(const NatConfig& cfg) {$/;"	f	namespace:__anone8b2175a0111	typeref:typename:void
test_tcp_translation	tests/test_nat.cpp	/^void test_tcp_translation(const NatConfig& cfg) {$/;"	f	namespace:__anone8b2175a0111	typeref:typename:void
test_udp_translation	tests/test_nat.cpp	/^void test_udp_translation(const NatConfig& cfg) {$/;"	f	namespace:__anone8b2175a0111	typeref:typename:void
test_udp_zero_checksum_stays_zero	tests/test_nat.cpp	/^void test_udp_zero_checksum_stays_zero(const NatConfig& cfg) {$/;"	f	namespace:__anone8b2175a0111	typeref:typename:void
tests/test_checksum.cpp.i	build/Makefile	/^tests\/test_checksum.cpp.i:$/;"	t
tests/test_checksum.cpp.o	build/Makefile	/^tests\/test_checksum.cpp.o:$/;"	t
tests/test_checksum.cpp.s	build/Makefile	/^tests\/test_checksum.cpp.s:$/;"	t
tests/test_checksum.i	build/Makefile	/^tests\/test_checksum.i: tests\/test_checksum.cpp.i$/;"	t
tests/test_checksum.o	build/Makefile	/^tests\/test_checksum.o: tests\/test_checksum.cpp.o$/;"	t
tests/test_checksum.s	build/Makefile	/^tests\/test_checksum.s: tests\/test_checksum.cpp.s$/;"	t
tests/test_fanout.cpp.i	build/Makefile	/^tests\/test_fanout.cpp.i:$/;"	t
tests/test_fanout.cpp.o	build/Makefile	/^tests\/test_fanout.cpp.o:$/;"	t
tests/test_fanout.cpp.s	build/Makefile	/^tests\/test_fanout.cpp.s:$/;"	t
tests/test_fanout.i	build/Makefile	/^tests\/test_fanout.i: tests\/test_fanout.cpp.i$/;"	t
tests/test_fanout.o	build/Makefile	/^tests\/test_fanout.o: tests\/test_fanout.cpp.o$/;"	t
tests/test_fanout.s	build/Makefile	/^tests\/test_fanout.s: tests\/test_fanout.cpp.s$/;"	t
thread_	common/worker.hpp	/^    std::thread thread_;$/;"	m	class:Worker	typeref:typename:std::thread
thread_count	common/worker.hpp	/^    uint32_t thread_count = 1;$/;"	m	struct:WorkerPipelineConfig	typeref:typename:uint32_t
thread_index	common/worker.hpp	/^    uint32_t thread_index = 0;$/;"	m	struct:WorkerPipelineConfig	typeref:typename:uint32_t
thread_index	nat/nat.h	/^    uint32_t thread_index() const noexcept { return thread_index_; }$/;"	f	class:Nat	typeref:typename:uint32_t
thread_index_	nat/nat.h	/^    uint32_t thread_index_ = 0;$/;"	m	class:Nat	typeref:typename:uint32_t
timeout_ns	af_packet_io/packet_socket.hpp	/^    uint32_t timeout_ns = 1000000; \/\/ 1ms$/;"	m	struct:af_packet_io::RingConfig	typeref:typename:uint32_t
tipckey	tests/flow_dissector.h	/^        } tipckey;$/;"	m	union:flow_dissector_key_addrs::__anon058a5124010a	typeref:struct:flow_dissector_key_addrs::__anon058a5124010a::__anon058a51240408
to_native_protocol	af_packet_io/packet_socket.cpp	/^int to_native_protocol(int protocol) {$/;"	f	namespace:af_packet_io::__anon45c0227a0111	typeref:typename:int
to_string_host	nat/nat_icmp.cpp	/^std::string to_string_host(uint32_t host_ip) {$/;"	f	namespace:__anon97f778730111	typeref:typename:std::string
to_string_host	nat/nat_ipv4.cpp	/^std::string to_string_host(uint32_t host_ip) {$/;"	f	namespace:__anon916d3dad0111	typeref:typename:std::string
to_string_host	nat/nat_tcp.cpp	/^std::string to_string_host(uint32_t host_ip) {$/;"	f	namespace:__anon43ea9b910111	typeref:typename:std::string
to_string_host	nat/nat_udp.cpp	/^std::string to_string_host(uint32_t host_ip) {$/;"	f	namespace:__anon933a00f30111	typeref:typename:std::string
to_tuple	include/icmp.h	/^        auto to_tuple() const {$/;"	f	struct:ICMPHeader::Flow	typeref:typename:auto
to_tuple	include/ipv4.h	/^        auto to_tuple() const {$/;"	f	struct:IPv4Header::Flow	typeref:typename:auto
to_tuple	include/tcp.h	/^        auto to_tuple() const {$/;"	f	struct:TCPHeader::Flow	typeref:typename:auto
to_tuple	include/udp.h	/^        auto to_tuple() const {$/;"	f	struct:UDPHeader::Flow	typeref:typename:auto
touch_entry	nat/nat.cpp	/^void Nat::touch_entry(MappingTable& table, MappingEntry& entry) {$/;"	f	class:Nat	typeref:typename:void
tp_len	tests/rxhash.c	/^    uint32_t tp_len;$/;"	m	struct:tpacket_auxdata_compat	typeref:typename:uint32_t	file:
tp_mac	tests/rxhash.c	/^    uint16_t tp_mac;$/;"	m	struct:tpacket_auxdata_compat	typeref:typename:uint16_t	file:
tp_net	tests/rxhash.c	/^    uint16_t tp_net;$/;"	m	struct:tpacket_auxdata_compat	typeref:typename:uint16_t	file:
tp_rxhash	tests/rxhash.c	/^    uint32_t tp_rxhash;   \/\/ расширение$/;"	m	struct:tpacket_auxdata_compat	typeref:typename:uint32_t	file:
tp_snaplen	tests/rxhash.c	/^    uint32_t tp_snaplen;$/;"	m	struct:tpacket_auxdata_compat	typeref:typename:uint32_t	file:
tp_status	tests/rxhash.c	/^    uint32_t tp_status;$/;"	m	struct:tpacket_auxdata_compat	typeref:typename:uint32_t	file:
tpacket_auxdata_compat	tests/rxhash.c	/^struct tpacket_auxdata_compat {$/;"	s	file:
transmit_pending	common/worker.cpp	/^void Worker::transmit_pending(InterfaceContext& ctx) {$/;"	f	class:Worker	typeref:typename:void
tx_interface	af_packet_io/io_context.hpp	/^    std::string tx_interface;$/;"	m	struct:af_packet_io::IoConfig	typeref:typename:std::string
tx_map_	af_packet_io/packet_socket.hpp	/^    void* tx_map_ = nullptr;$/;"	m	class:af_packet_io::PacketSocket	typeref:typename:void *
tx_map_len_	af_packet_io/packet_socket.hpp	/^    size_t tx_map_len_ = 0;$/;"	m	class:af_packet_io::PacketSocket	typeref:typename:size_t
tx_queue	common/worker.hpp	/^        std::vector<TxFrame> tx_queue;$/;"	m	struct:Worker::InterfaceContext	typeref:typename:std::vector<TxFrame>
tx_ring	af_packet_io/io_context.cpp	/^RingView IoContext::tx_ring() const noexcept {$/;"	f	class:af_packet_io::IoContext	typeref:typename:RingView
tx_ring	af_packet_io/io_context.hpp	/^    RingConfig tx_ring{};$/;"	m	struct:af_packet_io::IoConfig	typeref:typename:RingConfig
tx_ring_index	common/worker.hpp	/^        size_t tx_ring_index = 0;$/;"	m	struct:Worker::InterfaceContext	typeref:typename:size_t
udp_port_max	nat/nat_config.hpp	/^    uint16_t udp_port_max = 20000;$/;"	m	struct:NatConfig	typeref:typename:uint16_t
udp_port_min	nat/nat_config.hpp	/^    uint16_t udp_port_min = 10000;$/;"	m	struct:NatConfig	typeref:typename:uint16_t
udp_table_	nat/nat.h	/^    MappingTable udp_table_{};$/;"	m	class:Nat	typeref:typename:MappingTable
udp_thread_capacity	nat/nat_config.hpp	/^    uint32_t udp_thread_capacity = 2048;$/;"	m	struct:NatConfig	typeref:typename:uint32_t
udph	include/udp.h	/^    struct udphdr udph;$/;"	m	struct:UDPHeader	typeref:struct:udphdr
usage	scripts/setup_veth_env.sh	/^usage() {$/;"	f
useFile_	common/logger.h	/^    bool useFile_ = false;$/;"	m	class:Logger	typeref:typename:bool
uses_ports	include/icmp.h	/^    static constexpr bool uses_ports = false; \/\/ используется идентифика/;"	m	struct:ICMPHeader	typeref:typename:bool
uses_ports	include/ipv4.h	/^    static constexpr bool uses_ports = false;$/;"	m	struct:IPv4Header	typeref:typename:bool
uses_ports	include/tcp.h	/^    static constexpr bool uses_ports = true;$/;"	m	struct:TCPHeader	typeref:typename:bool
uses_ports	include/udp.h	/^    static constexpr bool uses_ports = true;$/;"	m	struct:UDPHeader	typeref:typename:bool
v4addrs	tests/flow_dissector.h	/^        } v4addrs;$/;"	m	union:flow_dissector_key_addrs::__anon058a5124010a	typeref:struct:flow_dissector_key_addrs::__anon058a5124010a::__anon058a51240208
v6addrs	tests/flow_dissector.h	/^        } v6addrs;$/;"	m	union:flow_dissector_key_addrs::__anon058a5124010a	typeref:struct:flow_dissector_key_addrs::__anon058a5124010a::__anon058a51240308
valid	af_packet_io/ring_buffer.hpp	/^    bool valid() const noexcept { return area_ != nullptr; }$/;"	f	class:af_packet_io::RingView	typeref:typename:bool
worker_	common/logger.h	/^    std::thread worker_;$/;"	m	class:Logger	typeref:typename:std::thread
worker_thread	tests/test_fanout.cpp	/^void worker_thread(const NatConfig& cfg, uint32_t cpu_count, const std::string& ifname,$/;"	f	typeref:typename:void
~IoContext	af_packet_io/io_context.cpp	/^IoContext::~IoContext() {$/;"	f	class:af_packet_io::IoContext
~Logger	common/logger.h	/^    ~Logger() { shutdown(); }$/;"	f	class:Logger
~Netset	common/netset.hpp	/^    ~Netset() { destroy(); }$/;"	f	class:Netset
~PacketSocket	af_packet_io/packet_socket.cpp	/^PacketSocket::~PacketSocket() { close(); }$/;"	f	class:af_packet_io::PacketSocket
~Worker	common/worker.cpp	/^Worker::~Worker() { stop(); }$/;"	f	class:Worker
